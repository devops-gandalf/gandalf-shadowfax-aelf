// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: token_holder_contract.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AElf.Contracts.TokenHolder {

  /// <summary>Holder for reflection information generated from token_holder_contract.proto</summary>
  internal static partial class TokenHolderContractReflection {

    #region Descriptor
    /// <summary>File descriptor for token_holder_contract.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TokenHolderContractReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cht0b2tlbl9ob2xkZXJfY29udHJhY3QucHJvdG8SC1Rva2VuSG9sZGVyGg9h",
            "ZWxmL2NvcmUucHJvdG8aEmFlbGYvb3B0aW9ucy5wcm90bxobZ29vZ2xlL3By",
            "b3RvYnVmL2VtcHR5LnByb3RvGh5nb29nbGUvcHJvdG9idWYvd3JhcHBlcnMu",
            "cHJvdG8igwIKIkNyZWF0ZVRva2VuSG9sZGVyUHJvZml0U2NoZW1lSW5wdXQS",
            "DgoGc3ltYm9sGAEgASgJEhwKFG1pbmltdW1fbG9ja19taW51dGVzGAIgASgD",
            "Em8KGWF1dG9fZGlzdHJpYnV0ZV90aHJlc2hvbGQYAyADKAsyTC5Ub2tlbkhv",
            "bGRlci5DcmVhdGVUb2tlbkhvbGRlclByb2ZpdFNjaGVtZUlucHV0LkF1dG9E",
            "aXN0cmlidXRlVGhyZXNob2xkRW50cnkaPgocQXV0b0Rpc3RyaWJ1dGVUaHJl",
            "c2hvbGRFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAM6AjgBIlQK",
            "HkFkZFRva2VuSG9sZGVyQmVuZWZpY2lhcnlJbnB1dBIiCgtiZW5lZmljaWFy",
            "eRgBIAEoCzINLmFlbGYuQWRkcmVzcxIOCgZzaGFyZXMYAiABKAMiVwohUmVt",
            "b3ZlVG9rZW5Ib2xkZXJCZW5lZmljaWFyeUlucHV0EiIKC2JlbmVmaWNpYXJ5",
            "GAEgASgLMg0uYWVsZi5BZGRyZXNzEg4KBmFtb3VudBgCIAEoAyJfChZDb250",
            "cmlidXRlUHJvZml0c0lucHV0EiUKDnNjaGVtZV9tYW5hZ2VyGAEgASgLMg0u",
            "YWVsZi5BZGRyZXNzEg4KBmFtb3VudBgCIAEoAxIOCgZzeW1ib2wYAyABKAki",
            "vAEKFkRpc3RyaWJ1dGVQcm9maXRzSW5wdXQSJQoOc2NoZW1lX21hbmFnZXIY",
            "ASABKAsyDS5hZWxmLkFkZHJlc3MSSAoLYW1vdW50c19tYXAYAiADKAsyMy5U",
            "b2tlbkhvbGRlci5EaXN0cmlidXRlUHJvZml0c0lucHV0LkFtb3VudHNNYXBF",
            "bnRyeRoxCg9BbW91bnRzTWFwRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVl",
            "GAIgASgDOgI4ASJQChdSZWdpc3RlckZvclByb2ZpdHNJbnB1dBIlCg5zY2hl",
            "bWVfbWFuYWdlchgBIAEoCzINLmFlbGYuQWRkcmVzcxIOCgZhbW91bnQYAiAB",
            "KAMiXgoRQ2xhaW1Qcm9maXRzSW5wdXQSJQoOc2NoZW1lX21hbmFnZXIYASAB",
            "KAsyDS5hZWxmLkFkZHJlc3MSIgoLYmVuZWZpY2lhcnkYAiABKAsyDS5hZWxm",
            "LkFkZHJlc3MinAIKF1Rva2VuSG9sZGVyUHJvZml0U2NoZW1lEg4KBnN5bWJv",
            "bBgBIAEoCRIdCglzY2hlbWVfaWQYAiABKAsyCi5hZWxmLkhhc2gSDgoGcGVy",
            "aW9kGAMgASgDEhwKFG1pbmltdW1fbG9ja19taW51dGVzGAQgASgDEmQKGWF1",
            "dG9fZGlzdHJpYnV0ZV90aHJlc2hvbGQYBSADKAsyQS5Ub2tlbkhvbGRlci5U",
            "b2tlbkhvbGRlclByb2ZpdFNjaGVtZS5BdXRvRGlzdHJpYnV0ZVRocmVzaG9s",
            "ZEVudHJ5Gj4KHEF1dG9EaXN0cmlidXRlVGhyZXNob2xkRW50cnkSCwoDa2V5",
            "GAEgASgJEg0KBXZhbHVlGAIgASgDOgI4ASJ9ChJSZWNlaXZlZFByb2ZpdHNN",
            "YXASOQoFdmFsdWUYASADKAsyKi5Ub2tlbkhvbGRlci5SZWNlaXZlZFByb2Zp",
            "dHNNYXAuVmFsdWVFbnRyeRosCgpWYWx1ZUVudHJ5EgsKA2tleRgBIAEoCRIN",
            "CgV2YWx1ZRgCIAEoAzoCOAEygQcKE1Rva2VuSG9sZGVyQ29udHJhY3QSWQoM",
            "Q3JlYXRlU2NoZW1lEi8uVG9rZW5Ib2xkZXIuQ3JlYXRlVG9rZW5Ib2xkZXJQ",
            "cm9maXRTY2hlbWVJbnB1dBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAElcK",
            "DkFkZEJlbmVmaWNpYXJ5EisuVG9rZW5Ib2xkZXIuQWRkVG9rZW5Ib2xkZXJC",
            "ZW5lZmljaWFyeUlucHV0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASXQoR",
            "UmVtb3ZlQmVuZWZpY2lhcnkSLi5Ub2tlbkhvbGRlci5SZW1vdmVUb2tlbkhv",
            "bGRlckJlbmVmaWNpYXJ5SW5wdXQaFi5nb29nbGUucHJvdG9idWYuRW1wdHki",
            "ABJSChFDb250cmlidXRlUHJvZml0cxIjLlRva2VuSG9sZGVyLkNvbnRyaWJ1",
            "dGVQcm9maXRzSW5wdXQaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABJSChFE",
            "aXN0cmlidXRlUHJvZml0cxIjLlRva2VuSG9sZGVyLkRpc3RyaWJ1dGVQcm9m",
            "aXRzSW5wdXQaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABJUChJSZWdpc3Rl",
            "ckZvclByb2ZpdHMSJC5Ub2tlbkhvbGRlci5SZWdpc3RlckZvclByb2ZpdHNJ",
            "bnB1dBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAEjMKCFdpdGhkcmF3Eg0u",
            "YWVsZi5BZGRyZXNzGhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASSAoMQ2xh",
            "aW1Qcm9maXRzEh4uVG9rZW5Ib2xkZXIuQ2xhaW1Qcm9maXRzSW5wdXQaFi5n",
            "b29nbGUucHJvdG9idWYuRW1wdHkiABJHCglHZXRTY2hlbWUSDS5hZWxmLkFk",
            "ZHJlc3MaJC5Ub2tlbkhvbGRlci5Ub2tlbkhvbGRlclByb2ZpdFNjaGVtZSIF",
            "iIn3AQESVwoNR2V0UHJvZml0c01hcBIeLlRva2VuSG9sZGVyLkNsYWltUHJv",
            "Zml0c0lucHV0Gh8uVG9rZW5Ib2xkZXIuUmVjZWl2ZWRQcm9maXRzTWFwIgWI",
            "ifcBARo4ssz2ATNBRWxmLkNvbnRyYWN0cy5Ub2tlbkhvbGRlci5Ub2tlbkhv",
            "bGRlckNvbnRyYWN0U3RhdGVCHaoCGkFFbGYuQ29udHJhY3RzLlRva2VuSG9s",
            "ZGVyYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::AElf.Types.CoreReflection.Descriptor, global::AElf.OptionsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.TokenHolder.CreateTokenHolderProfitSchemeInput), global::AElf.Contracts.TokenHolder.CreateTokenHolderProfitSchemeInput.Parser, new[]{ "Symbol", "MinimumLockMinutes", "AutoDistributeThreshold" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.TokenHolder.AddTokenHolderBeneficiaryInput), global::AElf.Contracts.TokenHolder.AddTokenHolderBeneficiaryInput.Parser, new[]{ "Beneficiary", "Shares" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.TokenHolder.RemoveTokenHolderBeneficiaryInput), global::AElf.Contracts.TokenHolder.RemoveTokenHolderBeneficiaryInput.Parser, new[]{ "Beneficiary", "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.TokenHolder.ContributeProfitsInput), global::AElf.Contracts.TokenHolder.ContributeProfitsInput.Parser, new[]{ "SchemeManager", "Amount", "Symbol" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.TokenHolder.DistributeProfitsInput), global::AElf.Contracts.TokenHolder.DistributeProfitsInput.Parser, new[]{ "SchemeManager", "AmountsMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.TokenHolder.RegisterForProfitsInput), global::AElf.Contracts.TokenHolder.RegisterForProfitsInput.Parser, new[]{ "SchemeManager", "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.TokenHolder.ClaimProfitsInput), global::AElf.Contracts.TokenHolder.ClaimProfitsInput.Parser, new[]{ "SchemeManager", "Beneficiary" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.TokenHolder.TokenHolderProfitScheme), global::AElf.Contracts.TokenHolder.TokenHolderProfitScheme.Parser, new[]{ "Symbol", "SchemeId", "Period", "MinimumLockMinutes", "AutoDistributeThreshold" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.TokenHolder.ReceivedProfitsMap), global::AElf.Contracts.TokenHolder.ReceivedProfitsMap.Parser, new[]{ "Value" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  internal sealed partial class CreateTokenHolderProfitSchemeInput : pb::IMessage<CreateTokenHolderProfitSchemeInput> {
    private static readonly pb::MessageParser<CreateTokenHolderProfitSchemeInput> _parser = new pb::MessageParser<CreateTokenHolderProfitSchemeInput>(() => new CreateTokenHolderProfitSchemeInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateTokenHolderProfitSchemeInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.TokenHolder.TokenHolderContractReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateTokenHolderProfitSchemeInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateTokenHolderProfitSchemeInput(CreateTokenHolderProfitSchemeInput other) : this() {
      symbol_ = other.symbol_;
      minimumLockMinutes_ = other.minimumLockMinutes_;
      autoDistributeThreshold_ = other.autoDistributeThreshold_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateTokenHolderProfitSchemeInput Clone() {
      return new CreateTokenHolderProfitSchemeInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "minimum_lock_minutes" field.</summary>
    public const int MinimumLockMinutesFieldNumber = 2;
    private long minimumLockMinutes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MinimumLockMinutes {
      get { return minimumLockMinutes_; }
      set {
        minimumLockMinutes_ = value;
      }
    }

    /// <summary>Field number for the "auto_distribute_threshold" field.</summary>
    public const int AutoDistributeThresholdFieldNumber = 3;
    private static readonly pbc::MapField<string, long>.Codec _map_autoDistributeThreshold_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForInt64(16, 0L), 26);
    private readonly pbc::MapField<string, long> autoDistributeThreshold_ = new pbc::MapField<string, long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> AutoDistributeThreshold {
      get { return autoDistributeThreshold_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateTokenHolderProfitSchemeInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateTokenHolderProfitSchemeInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (MinimumLockMinutes != other.MinimumLockMinutes) return false;
      if (!AutoDistributeThreshold.Equals(other.AutoDistributeThreshold)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (MinimumLockMinutes != 0L) hash ^= MinimumLockMinutes.GetHashCode();
      hash ^= AutoDistributeThreshold.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (MinimumLockMinutes != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(MinimumLockMinutes);
      }
      autoDistributeThreshold_.WriteTo(output, _map_autoDistributeThreshold_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (MinimumLockMinutes != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinimumLockMinutes);
      }
      size += autoDistributeThreshold_.CalculateSize(_map_autoDistributeThreshold_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateTokenHolderProfitSchemeInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.MinimumLockMinutes != 0L) {
        MinimumLockMinutes = other.MinimumLockMinutes;
      }
      autoDistributeThreshold_.Add(other.autoDistributeThreshold_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 16: {
            MinimumLockMinutes = input.ReadInt64();
            break;
          }
          case 26: {
            autoDistributeThreshold_.AddEntriesFrom(input, _map_autoDistributeThreshold_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class AddTokenHolderBeneficiaryInput : pb::IMessage<AddTokenHolderBeneficiaryInput> {
    private static readonly pb::MessageParser<AddTokenHolderBeneficiaryInput> _parser = new pb::MessageParser<AddTokenHolderBeneficiaryInput>(() => new AddTokenHolderBeneficiaryInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddTokenHolderBeneficiaryInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.TokenHolder.TokenHolderContractReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddTokenHolderBeneficiaryInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddTokenHolderBeneficiaryInput(AddTokenHolderBeneficiaryInput other) : this() {
      beneficiary_ = other.beneficiary_ != null ? other.beneficiary_.Clone() : null;
      shares_ = other.shares_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddTokenHolderBeneficiaryInput Clone() {
      return new AddTokenHolderBeneficiaryInput(this);
    }

    /// <summary>Field number for the "beneficiary" field.</summary>
    public const int BeneficiaryFieldNumber = 1;
    private global::AElf.Types.Address beneficiary_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Beneficiary {
      get { return beneficiary_; }
      set {
        beneficiary_ = value;
      }
    }

    /// <summary>Field number for the "shares" field.</summary>
    public const int SharesFieldNumber = 2;
    private long shares_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Shares {
      get { return shares_; }
      set {
        shares_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddTokenHolderBeneficiaryInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddTokenHolderBeneficiaryInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Beneficiary, other.Beneficiary)) return false;
      if (Shares != other.Shares) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (beneficiary_ != null) hash ^= Beneficiary.GetHashCode();
      if (Shares != 0L) hash ^= Shares.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (beneficiary_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Beneficiary);
      }
      if (Shares != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Shares);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (beneficiary_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Beneficiary);
      }
      if (Shares != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Shares);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddTokenHolderBeneficiaryInput other) {
      if (other == null) {
        return;
      }
      if (other.beneficiary_ != null) {
        if (beneficiary_ == null) {
          Beneficiary = new global::AElf.Types.Address();
        }
        Beneficiary.MergeFrom(other.Beneficiary);
      }
      if (other.Shares != 0L) {
        Shares = other.Shares;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (beneficiary_ == null) {
              Beneficiary = new global::AElf.Types.Address();
            }
            input.ReadMessage(Beneficiary);
            break;
          }
          case 16: {
            Shares = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class RemoveTokenHolderBeneficiaryInput : pb::IMessage<RemoveTokenHolderBeneficiaryInput> {
    private static readonly pb::MessageParser<RemoveTokenHolderBeneficiaryInput> _parser = new pb::MessageParser<RemoveTokenHolderBeneficiaryInput>(() => new RemoveTokenHolderBeneficiaryInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveTokenHolderBeneficiaryInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.TokenHolder.TokenHolderContractReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveTokenHolderBeneficiaryInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveTokenHolderBeneficiaryInput(RemoveTokenHolderBeneficiaryInput other) : this() {
      beneficiary_ = other.beneficiary_ != null ? other.beneficiary_.Clone() : null;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveTokenHolderBeneficiaryInput Clone() {
      return new RemoveTokenHolderBeneficiaryInput(this);
    }

    /// <summary>Field number for the "beneficiary" field.</summary>
    public const int BeneficiaryFieldNumber = 1;
    private global::AElf.Types.Address beneficiary_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Beneficiary {
      get { return beneficiary_; }
      set {
        beneficiary_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveTokenHolderBeneficiaryInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveTokenHolderBeneficiaryInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Beneficiary, other.Beneficiary)) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (beneficiary_ != null) hash ^= Beneficiary.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (beneficiary_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Beneficiary);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (beneficiary_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Beneficiary);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveTokenHolderBeneficiaryInput other) {
      if (other == null) {
        return;
      }
      if (other.beneficiary_ != null) {
        if (beneficiary_ == null) {
          Beneficiary = new global::AElf.Types.Address();
        }
        Beneficiary.MergeFrom(other.Beneficiary);
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (beneficiary_ == null) {
              Beneficiary = new global::AElf.Types.Address();
            }
            input.ReadMessage(Beneficiary);
            break;
          }
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ContributeProfitsInput : pb::IMessage<ContributeProfitsInput> {
    private static readonly pb::MessageParser<ContributeProfitsInput> _parser = new pb::MessageParser<ContributeProfitsInput>(() => new ContributeProfitsInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContributeProfitsInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.TokenHolder.TokenHolderContractReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContributeProfitsInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContributeProfitsInput(ContributeProfitsInput other) : this() {
      schemeManager_ = other.schemeManager_ != null ? other.schemeManager_.Clone() : null;
      amount_ = other.amount_;
      symbol_ = other.symbol_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContributeProfitsInput Clone() {
      return new ContributeProfitsInput(this);
    }

    /// <summary>Field number for the "scheme_manager" field.</summary>
    public const int SchemeManagerFieldNumber = 1;
    private global::AElf.Types.Address schemeManager_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address SchemeManager {
      get { return schemeManager_; }
      set {
        schemeManager_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 3;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContributeProfitsInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContributeProfitsInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SchemeManager, other.SchemeManager)) return false;
      if (Amount != other.Amount) return false;
      if (Symbol != other.Symbol) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (schemeManager_ != null) hash ^= SchemeManager.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (schemeManager_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SchemeManager);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Symbol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (schemeManager_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SchemeManager);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContributeProfitsInput other) {
      if (other == null) {
        return;
      }
      if (other.schemeManager_ != null) {
        if (schemeManager_ == null) {
          SchemeManager = new global::AElf.Types.Address();
        }
        SchemeManager.MergeFrom(other.SchemeManager);
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (schemeManager_ == null) {
              SchemeManager = new global::AElf.Types.Address();
            }
            input.ReadMessage(SchemeManager);
            break;
          }
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
          case 26: {
            Symbol = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class DistributeProfitsInput : pb::IMessage<DistributeProfitsInput> {
    private static readonly pb::MessageParser<DistributeProfitsInput> _parser = new pb::MessageParser<DistributeProfitsInput>(() => new DistributeProfitsInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DistributeProfitsInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.TokenHolder.TokenHolderContractReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DistributeProfitsInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DistributeProfitsInput(DistributeProfitsInput other) : this() {
      schemeManager_ = other.schemeManager_ != null ? other.schemeManager_.Clone() : null;
      amountsMap_ = other.amountsMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DistributeProfitsInput Clone() {
      return new DistributeProfitsInput(this);
    }

    /// <summary>Field number for the "scheme_manager" field.</summary>
    public const int SchemeManagerFieldNumber = 1;
    private global::AElf.Types.Address schemeManager_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address SchemeManager {
      get { return schemeManager_; }
      set {
        schemeManager_ = value;
      }
    }

    /// <summary>Field number for the "amounts_map" field.</summary>
    public const int AmountsMapFieldNumber = 2;
    private static readonly pbc::MapField<string, long>.Codec _map_amountsMap_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForInt64(16, 0L), 18);
    private readonly pbc::MapField<string, long> amountsMap_ = new pbc::MapField<string, long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> AmountsMap {
      get { return amountsMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DistributeProfitsInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DistributeProfitsInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SchemeManager, other.SchemeManager)) return false;
      if (!AmountsMap.Equals(other.AmountsMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (schemeManager_ != null) hash ^= SchemeManager.GetHashCode();
      hash ^= AmountsMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (schemeManager_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SchemeManager);
      }
      amountsMap_.WriteTo(output, _map_amountsMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (schemeManager_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SchemeManager);
      }
      size += amountsMap_.CalculateSize(_map_amountsMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DistributeProfitsInput other) {
      if (other == null) {
        return;
      }
      if (other.schemeManager_ != null) {
        if (schemeManager_ == null) {
          SchemeManager = new global::AElf.Types.Address();
        }
        SchemeManager.MergeFrom(other.SchemeManager);
      }
      amountsMap_.Add(other.amountsMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (schemeManager_ == null) {
              SchemeManager = new global::AElf.Types.Address();
            }
            input.ReadMessage(SchemeManager);
            break;
          }
          case 18: {
            amountsMap_.AddEntriesFrom(input, _map_amountsMap_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class RegisterForProfitsInput : pb::IMessage<RegisterForProfitsInput> {
    private static readonly pb::MessageParser<RegisterForProfitsInput> _parser = new pb::MessageParser<RegisterForProfitsInput>(() => new RegisterForProfitsInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterForProfitsInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.TokenHolder.TokenHolderContractReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterForProfitsInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterForProfitsInput(RegisterForProfitsInput other) : this() {
      schemeManager_ = other.schemeManager_ != null ? other.schemeManager_.Clone() : null;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterForProfitsInput Clone() {
      return new RegisterForProfitsInput(this);
    }

    /// <summary>Field number for the "scheme_manager" field.</summary>
    public const int SchemeManagerFieldNumber = 1;
    private global::AElf.Types.Address schemeManager_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address SchemeManager {
      get { return schemeManager_; }
      set {
        schemeManager_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterForProfitsInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterForProfitsInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SchemeManager, other.SchemeManager)) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (schemeManager_ != null) hash ^= SchemeManager.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (schemeManager_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SchemeManager);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (schemeManager_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SchemeManager);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterForProfitsInput other) {
      if (other == null) {
        return;
      }
      if (other.schemeManager_ != null) {
        if (schemeManager_ == null) {
          SchemeManager = new global::AElf.Types.Address();
        }
        SchemeManager.MergeFrom(other.SchemeManager);
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (schemeManager_ == null) {
              SchemeManager = new global::AElf.Types.Address();
            }
            input.ReadMessage(SchemeManager);
            break;
          }
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ClaimProfitsInput : pb::IMessage<ClaimProfitsInput> {
    private static readonly pb::MessageParser<ClaimProfitsInput> _parser = new pb::MessageParser<ClaimProfitsInput>(() => new ClaimProfitsInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClaimProfitsInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.TokenHolder.TokenHolderContractReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClaimProfitsInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClaimProfitsInput(ClaimProfitsInput other) : this() {
      schemeManager_ = other.schemeManager_ != null ? other.schemeManager_.Clone() : null;
      beneficiary_ = other.beneficiary_ != null ? other.beneficiary_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClaimProfitsInput Clone() {
      return new ClaimProfitsInput(this);
    }

    /// <summary>Field number for the "scheme_manager" field.</summary>
    public const int SchemeManagerFieldNumber = 1;
    private global::AElf.Types.Address schemeManager_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address SchemeManager {
      get { return schemeManager_; }
      set {
        schemeManager_ = value;
      }
    }

    /// <summary>Field number for the "beneficiary" field.</summary>
    public const int BeneficiaryFieldNumber = 2;
    private global::AElf.Types.Address beneficiary_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Beneficiary {
      get { return beneficiary_; }
      set {
        beneficiary_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClaimProfitsInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClaimProfitsInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SchemeManager, other.SchemeManager)) return false;
      if (!object.Equals(Beneficiary, other.Beneficiary)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (schemeManager_ != null) hash ^= SchemeManager.GetHashCode();
      if (beneficiary_ != null) hash ^= Beneficiary.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (schemeManager_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SchemeManager);
      }
      if (beneficiary_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Beneficiary);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (schemeManager_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SchemeManager);
      }
      if (beneficiary_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Beneficiary);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClaimProfitsInput other) {
      if (other == null) {
        return;
      }
      if (other.schemeManager_ != null) {
        if (schemeManager_ == null) {
          SchemeManager = new global::AElf.Types.Address();
        }
        SchemeManager.MergeFrom(other.SchemeManager);
      }
      if (other.beneficiary_ != null) {
        if (beneficiary_ == null) {
          Beneficiary = new global::AElf.Types.Address();
        }
        Beneficiary.MergeFrom(other.Beneficiary);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (schemeManager_ == null) {
              SchemeManager = new global::AElf.Types.Address();
            }
            input.ReadMessage(SchemeManager);
            break;
          }
          case 18: {
            if (beneficiary_ == null) {
              Beneficiary = new global::AElf.Types.Address();
            }
            input.ReadMessage(Beneficiary);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class TokenHolderProfitScheme : pb::IMessage<TokenHolderProfitScheme> {
    private static readonly pb::MessageParser<TokenHolderProfitScheme> _parser = new pb::MessageParser<TokenHolderProfitScheme>(() => new TokenHolderProfitScheme());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TokenHolderProfitScheme> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.TokenHolder.TokenHolderContractReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenHolderProfitScheme() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenHolderProfitScheme(TokenHolderProfitScheme other) : this() {
      symbol_ = other.symbol_;
      schemeId_ = other.schemeId_ != null ? other.schemeId_.Clone() : null;
      period_ = other.period_;
      minimumLockMinutes_ = other.minimumLockMinutes_;
      autoDistributeThreshold_ = other.autoDistributeThreshold_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenHolderProfitScheme Clone() {
      return new TokenHolderProfitScheme(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scheme_id" field.</summary>
    public const int SchemeIdFieldNumber = 2;
    private global::AElf.Types.Hash schemeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash SchemeId {
      get { return schemeId_; }
      set {
        schemeId_ = value;
      }
    }

    /// <summary>Field number for the "period" field.</summary>
    public const int PeriodFieldNumber = 3;
    private long period_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Period {
      get { return period_; }
      set {
        period_ = value;
      }
    }

    /// <summary>Field number for the "minimum_lock_minutes" field.</summary>
    public const int MinimumLockMinutesFieldNumber = 4;
    private long minimumLockMinutes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MinimumLockMinutes {
      get { return minimumLockMinutes_; }
      set {
        minimumLockMinutes_ = value;
      }
    }

    /// <summary>Field number for the "auto_distribute_threshold" field.</summary>
    public const int AutoDistributeThresholdFieldNumber = 5;
    private static readonly pbc::MapField<string, long>.Codec _map_autoDistributeThreshold_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForInt64(16, 0L), 42);
    private readonly pbc::MapField<string, long> autoDistributeThreshold_ = new pbc::MapField<string, long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> AutoDistributeThreshold {
      get { return autoDistributeThreshold_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TokenHolderProfitScheme);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TokenHolderProfitScheme other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (!object.Equals(SchemeId, other.SchemeId)) return false;
      if (Period != other.Period) return false;
      if (MinimumLockMinutes != other.MinimumLockMinutes) return false;
      if (!AutoDistributeThreshold.Equals(other.AutoDistributeThreshold)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (schemeId_ != null) hash ^= SchemeId.GetHashCode();
      if (Period != 0L) hash ^= Period.GetHashCode();
      if (MinimumLockMinutes != 0L) hash ^= MinimumLockMinutes.GetHashCode();
      hash ^= AutoDistributeThreshold.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (schemeId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SchemeId);
      }
      if (Period != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Period);
      }
      if (MinimumLockMinutes != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(MinimumLockMinutes);
      }
      autoDistributeThreshold_.WriteTo(output, _map_autoDistributeThreshold_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (schemeId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SchemeId);
      }
      if (Period != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Period);
      }
      if (MinimumLockMinutes != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinimumLockMinutes);
      }
      size += autoDistributeThreshold_.CalculateSize(_map_autoDistributeThreshold_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TokenHolderProfitScheme other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.schemeId_ != null) {
        if (schemeId_ == null) {
          SchemeId = new global::AElf.Types.Hash();
        }
        SchemeId.MergeFrom(other.SchemeId);
      }
      if (other.Period != 0L) {
        Period = other.Period;
      }
      if (other.MinimumLockMinutes != 0L) {
        MinimumLockMinutes = other.MinimumLockMinutes;
      }
      autoDistributeThreshold_.Add(other.autoDistributeThreshold_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 18: {
            if (schemeId_ == null) {
              SchemeId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(SchemeId);
            break;
          }
          case 24: {
            Period = input.ReadInt64();
            break;
          }
          case 32: {
            MinimumLockMinutes = input.ReadInt64();
            break;
          }
          case 42: {
            autoDistributeThreshold_.AddEntriesFrom(input, _map_autoDistributeThreshold_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ReceivedProfitsMap : pb::IMessage<ReceivedProfitsMap> {
    private static readonly pb::MessageParser<ReceivedProfitsMap> _parser = new pb::MessageParser<ReceivedProfitsMap>(() => new ReceivedProfitsMap());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReceivedProfitsMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.TokenHolder.TokenHolderContractReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceivedProfitsMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceivedProfitsMap(ReceivedProfitsMap other) : this() {
      value_ = other.value_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceivedProfitsMap Clone() {
      return new ReceivedProfitsMap(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pbc::MapField<string, long>.Codec _map_value_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForInt64(16, 0L), 10);
    private readonly pbc::MapField<string, long> value_ = new pbc::MapField<string, long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> Value {
      get { return value_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReceivedProfitsMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReceivedProfitsMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Value.Equals(other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      value_.WriteTo(output, _map_value_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_map_value_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReceivedProfitsMap other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            value_.AddEntriesFrom(input, _map_value_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
