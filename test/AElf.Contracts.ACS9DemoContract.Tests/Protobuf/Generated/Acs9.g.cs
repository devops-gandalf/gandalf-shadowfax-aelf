// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: acs9.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AElf.Standards.ACS9 {

  /// <summary>Holder for reflection information generated from acs9.proto</summary>
  internal static partial class Acs9Reflection {

    #region Descriptor
    /// <summary>File descriptor for acs9.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static Acs9Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgphY3M5LnByb3RvEgRhY3M5GhJhZWxmL29wdGlvbnMucHJvdG8aG2dvb2ds",
            "ZS9wcm90b2J1Zi9lbXB0eS5wcm90byI6ChhUYWtlQ29udHJhY3RQcm9maXRz",
            "SW5wdXQSDgoGc3ltYm9sGAEgASgJEg4KBmFtb3VudBgCIAEoAyJzCgxQcm9m",
            "aXRDb25maWcSIgoaZG9uYXRpb25fcGFydHNfcGVyX2h1bmRyZWQYASABKAUS",
            "IQoZcHJvZml0c190b2tlbl9zeW1ib2xfbGlzdBgCIAMoCRIcChRzdGFraW5n",
            "X3Rva2VuX3N5bWJvbBgDIAEoCSJmCgpQcm9maXRzTWFwEioKBXZhbHVlGAEg",
            "AygLMhsuYWNzOS5Qcm9maXRzTWFwLlZhbHVlRW50cnkaLAoKVmFsdWVFbnRy",
            "eRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAM6AjgBMvUBChdDb250cmFj",
            "dFByb2ZpdHNDb250cmFjdBJPChNUYWtlQ29udHJhY3RQcm9maXRzEh4uYWNz",
            "OS5UYWtlQ29udHJhY3RQcm9maXRzSW5wdXQaFi5nb29nbGUucHJvdG9idWYu",
            "RW1wdHkiABJECg9HZXRQcm9maXRDb25maWcSFi5nb29nbGUucHJvdG9idWYu",
            "RW1wdHkaEi5hY3M5LlByb2ZpdENvbmZpZyIFiIn3AQESQwoQR2V0UHJvZml0",
            "c0Ftb3VudBIWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eRoQLmFjczkuUHJvZml0",
            "c01hcCIFiIn3AQFCH6oCE0FFbGYuU3RhbmRhcmRzLkFDUzmKkvQBBGFjczlQ",
            "AFABYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::AElf.OptionsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Standards.ACS9.TakeContractProfitsInput), global::AElf.Standards.ACS9.TakeContractProfitsInput.Parser, new[]{ "Symbol", "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Standards.ACS9.ProfitConfig), global::AElf.Standards.ACS9.ProfitConfig.Parser, new[]{ "DonationPartsPerHundred", "ProfitsTokenSymbolList", "StakingTokenSymbol" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Standards.ACS9.ProfitsMap), global::AElf.Standards.ACS9.ProfitsMap.Parser, new[]{ "Value" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  internal sealed partial class TakeContractProfitsInput : pb::IMessage<TakeContractProfitsInput> {
    private static readonly pb::MessageParser<TakeContractProfitsInput> _parser = new pb::MessageParser<TakeContractProfitsInput>(() => new TakeContractProfitsInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TakeContractProfitsInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Standards.ACS9.Acs9Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeContractProfitsInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeContractProfitsInput(TakeContractProfitsInput other) : this() {
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeContractProfitsInput Clone() {
      return new TakeContractProfitsInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TakeContractProfitsInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TakeContractProfitsInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TakeContractProfitsInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ProfitConfig : pb::IMessage<ProfitConfig> {
    private static readonly pb::MessageParser<ProfitConfig> _parser = new pb::MessageParser<ProfitConfig>(() => new ProfitConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProfitConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Standards.ACS9.Acs9Reflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfitConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfitConfig(ProfitConfig other) : this() {
      donationPartsPerHundred_ = other.donationPartsPerHundred_;
      profitsTokenSymbolList_ = other.profitsTokenSymbolList_.Clone();
      stakingTokenSymbol_ = other.stakingTokenSymbol_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfitConfig Clone() {
      return new ProfitConfig(this);
    }

    /// <summary>Field number for the "donation_parts_per_hundred" field.</summary>
    public const int DonationPartsPerHundredFieldNumber = 1;
    private int donationPartsPerHundred_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DonationPartsPerHundred {
      get { return donationPartsPerHundred_; }
      set {
        donationPartsPerHundred_ = value;
      }
    }

    /// <summary>Field number for the "profits_token_symbol_list" field.</summary>
    public const int ProfitsTokenSymbolListFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_profitsTokenSymbolList_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> profitsTokenSymbolList_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ProfitsTokenSymbolList {
      get { return profitsTokenSymbolList_; }
    }

    /// <summary>Field number for the "staking_token_symbol" field.</summary>
    public const int StakingTokenSymbolFieldNumber = 3;
    private string stakingTokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StakingTokenSymbol {
      get { return stakingTokenSymbol_; }
      set {
        stakingTokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProfitConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProfitConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DonationPartsPerHundred != other.DonationPartsPerHundred) return false;
      if(!profitsTokenSymbolList_.Equals(other.profitsTokenSymbolList_)) return false;
      if (StakingTokenSymbol != other.StakingTokenSymbol) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DonationPartsPerHundred != 0) hash ^= DonationPartsPerHundred.GetHashCode();
      hash ^= profitsTokenSymbolList_.GetHashCode();
      if (StakingTokenSymbol.Length != 0) hash ^= StakingTokenSymbol.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DonationPartsPerHundred != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DonationPartsPerHundred);
      }
      profitsTokenSymbolList_.WriteTo(output, _repeated_profitsTokenSymbolList_codec);
      if (StakingTokenSymbol.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(StakingTokenSymbol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DonationPartsPerHundred != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DonationPartsPerHundred);
      }
      size += profitsTokenSymbolList_.CalculateSize(_repeated_profitsTokenSymbolList_codec);
      if (StakingTokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StakingTokenSymbol);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProfitConfig other) {
      if (other == null) {
        return;
      }
      if (other.DonationPartsPerHundred != 0) {
        DonationPartsPerHundred = other.DonationPartsPerHundred;
      }
      profitsTokenSymbolList_.Add(other.profitsTokenSymbolList_);
      if (other.StakingTokenSymbol.Length != 0) {
        StakingTokenSymbol = other.StakingTokenSymbol;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DonationPartsPerHundred = input.ReadInt32();
            break;
          }
          case 18: {
            profitsTokenSymbolList_.AddEntriesFrom(input, _repeated_profitsTokenSymbolList_codec);
            break;
          }
          case 26: {
            StakingTokenSymbol = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ProfitsMap : pb::IMessage<ProfitsMap> {
    private static readonly pb::MessageParser<ProfitsMap> _parser = new pb::MessageParser<ProfitsMap>(() => new ProfitsMap());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProfitsMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Standards.ACS9.Acs9Reflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfitsMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfitsMap(ProfitsMap other) : this() {
      value_ = other.value_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfitsMap Clone() {
      return new ProfitsMap(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pbc::MapField<string, long>.Codec _map_value_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForInt64(16, 0L), 10);
    private readonly pbc::MapField<string, long> value_ = new pbc::MapField<string, long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> Value {
      get { return value_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProfitsMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProfitsMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Value.Equals(other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      value_.WriteTo(output, _map_value_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_map_value_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProfitsMap other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            value_.AddEntriesFrom(input, _map_value_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
