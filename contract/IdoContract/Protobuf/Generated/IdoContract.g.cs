// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ido_contract.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace IdoContract {

  /// <summary>Holder for reflection information generated from ido_contract.proto</summary>
  public static partial class IdoContractReflection {

    #region Descriptor
    /// <summary>File descriptor for ido_contract.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static IdoContractReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJpZG9fY29udHJhY3QucHJvdG8aD2FlbGYvY29yZS5wcm90bxoSYWVsZi9v",
            "cHRpb25zLnByb3RvGhtnb29nbGUvcHJvdG9idWYvZW1wdHkucHJvdG8aHmdv",
            "b2dsZS9wcm90b2J1Zi93cmFwcGVycy5wcm90byKUAgoOUHVibGljT2ZmZXJp",
            "bmcSJAoNb2ZmZXJpbmdUb2tlbhgBIAEoCzINLmFlbGYuQWRkcmVzcxIWCg5v",
            "ZmZlcmluZ0Ftb3VudBgCIAEoAxIgCgl3YW50VG9rZW4YAyABKAsyDS5hZWxm",
            "LkFkZHJlc3MSFwoPd2FudFRva2VuQW1vdW50GAQgASgDEhEKCXN0YXJ0VGlt",
            "ZRgFIAEoAxIPCgdlbmRUaW1lGAYgASgDEiAKCXB1Ymxpc2hlchgHIAEoCzIN",
            "LmFlbGYuQWRkcmVzcxIPCgdjbGFpbWVkGAggASgIEhgKEHdhbnRUb2tlbkJh",
            "bGFuY2UYCSABKAMSGAoQc3Vic2NyaWJlZEFtb3VudBgKIAEoAyIxCghVc2Vy",
            "SW5mbxIPCgdjbGFpbWVkGAEgASgIEhQKDG9idGFpbkFtb3VudBgCIAEoAyI3",
            "Cg9QdWJsaWNPZmZlckxpc3QSJAoLcHVibGljT2ZmZXIYASADKAsyDy5QdWJs",
            "aWNPZmZlcmluZyK1AQoWQWRkUHVibGljT2ZmZXJpbmdJbnB1dBIkCg1vZmZl",
            "cmluZ1Rva2VuGAEgASgLMg0uYWVsZi5BZGRyZXNzEhYKDm9mZmVyaW5nQW1v",
            "dW50GAIgASgDEiAKCXdhbnRUb2tlbhgDIAEoCzINLmFlbGYuQWRkcmVzcxIX",
            "Cg93YW50VG9rZW5BbW91bnQYBCABKAMSEQoJc3RhcnRUaW1lGAUgASgDEg8K",
            "B2VuZFRpbWUYBiABKAMiVgoVQ2hhbmdlQXNjcmlwdGlvbklucHV0EhwKBXRv",
            "a2VuGAEgASgLMg0uYWVsZi5BZGRyZXNzEh8KCHJlY2VpdmVyGAIgASgLMg0u",
            "YWVsZi5BZGRyZXNzIj0KGUludmVzdFB1YmxpY09mZmVyaW5nSW5wdXQSEAoI",
            "cHVibGljSWQYASABKAMSDgoGYW1vdW50GAIgASgDIj4KElJlc2V0VGltZVNw",
            "YW5JbnB1dBITCgttYXhUaW1lc3BhbhgBIAEoAxITCgttaW5UaW1lc3BhbhgC",
            "IAEoAyLXAQoRQWRkUHVibGljT2ZmZXJpbmcSJAoNb2ZmZXJpbmdUb2tlbhgB",
            "IAEoCzINLmFlbGYuQWRkcmVzcxIWCg5vZmZlcmluZ0Ftb3VudBgCIAEoAxIm",
            "Cg93YW50VG9rZW5BbW91bnQYAyABKAsyDS5hZWxmLkFkZHJlc3MSIAoJcHVi",
            "bGlzaGVyGAQgASgLMg0uYWVsZi5BZGRyZXNzEhEKCXN0YXJ0VGltZRgFIAEo",
            "AxIPCgdlbmRUaW1lGAYgASgDEhAKCHB1YmxpY0lkGAcgASgDOgSguxgBIoAB",
            "ChBDaGFuZ2VBc2NyaXB0aW9uEhwKBXRva2VuGAEgASgLMg0uYWVsZi5BZGRy",
            "ZXNzEiMKDG9sZFB1Ymxpc2hlchgCIAEoCzINLmFlbGYuQWRkcmVzcxIjCgxu",
            "ZXdQdWJsaXNoZXIYAyABKAsyDS5hZWxmLkFkZHJlc3M6BKC7GAEiaAoIV2l0",
            "aGRyYXcSEQoJcHViaWxpY0lkGAEgASgDEhkKAnRvGAIgASgLMg0uYWVsZi5B",
            "ZGRyZXNzEhEKCXdhbnRUb2tlbhgDIAEoAxIVCg1vZmZlcmluZ1Rva2VuGAQg",
            "ASgDOgSguxgBIn4KBkludmVzdBIQCghwdWJsaWNJZBgBIAEoAxIfCghpbnZl",
            "c3RvchgCIAEoCzINLmFlbGYuQWRkcmVzcxIcCgV0b2tlbhgDIAEoCzINLmFl",
            "bGYuQWRkcmVzcxIOCgZpbmNvbWUYBCABKAMSDQoFc3BlbmQYBSABKAM6BKC7",
            "GAEiTAoHSGFydmVzdBIQCghwdWJsaWNJZBgBIAEoAxIZCgJ0bxgCIAEoCzIN",
            "LmFlbGYuQWRkcmVzcxIOCgZhbW91bnQYAyABKAM6BKC7GAEyjQQKC0lkb0Nv",
            "bnRyYWN0EjUKCkluaXRpYWxpemUSDS5hZWxmLkFkZHJlc3MaFi5nb29nbGUu",
            "cHJvdG9idWYuRW1wdHkiABJLChFBZGRQdWJsaWNPZmZlcmluZxIXLkFkZFB1",
            "YmxpY09mZmVyaW5nSW5wdXQaGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1",
            "ZSIAEkQKEENoYW5nZUFzY3JpcHRpb24SFi5DaGFuZ2VBc2NyaXB0aW9uSW5w",
            "dXQaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABJBCghXaXRoZHJhdxIbLmdv",
            "b2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlGhYuZ29vZ2xlLnByb3RvYnVmLkVt",
            "cHR5IgASTAoUSW52ZXN0UHVibGljT2ZmZXJpbmcSGi5JbnZlc3RQdWJsaWNP",
            "ZmZlcmluZ0lucHV0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASQAoHSGFy",
            "dmVzdBIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlGhYuZ29vZ2xlLnBy",
            "b3RvYnVmLkVtcHR5IgASPgoNUmVzZXRUaW1lU3BhbhITLlJlc2V0VGltZVNw",
            "YW5JbnB1dBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAGiGyzPYBHElkb0Nv",
            "bnRyYWN0Lklkb0NvbnRyYWN0U3RhdGVCDqoCC0lkb0NvbnRyYWN0YgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::AElf.Types.CoreReflection.Descriptor, global::AElf.OptionsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::IdoContract.PublicOffering), global::IdoContract.PublicOffering.Parser, new[]{ "OfferingToken", "OfferingAmount", "WantToken", "WantTokenAmount", "StartTime", "EndTime", "Publisher", "Claimed", "WantTokenBalance", "SubscribedAmount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IdoContract.UserInfo), global::IdoContract.UserInfo.Parser, new[]{ "Claimed", "ObtainAmount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IdoContract.PublicOfferList), global::IdoContract.PublicOfferList.Parser, new[]{ "PublicOffer" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IdoContract.AddPublicOfferingInput), global::IdoContract.AddPublicOfferingInput.Parser, new[]{ "OfferingToken", "OfferingAmount", "WantToken", "WantTokenAmount", "StartTime", "EndTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IdoContract.ChangeAscriptionInput), global::IdoContract.ChangeAscriptionInput.Parser, new[]{ "Token", "Receiver" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IdoContract.InvestPublicOfferingInput), global::IdoContract.InvestPublicOfferingInput.Parser, new[]{ "PublicId", "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IdoContract.ResetTimeSpanInput), global::IdoContract.ResetTimeSpanInput.Parser, new[]{ "MaxTimespan", "MinTimespan" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IdoContract.AddPublicOffering), global::IdoContract.AddPublicOffering.Parser, new[]{ "OfferingToken", "OfferingAmount", "WantTokenAmount", "Publisher", "StartTime", "EndTime", "PublicId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IdoContract.ChangeAscription), global::IdoContract.ChangeAscription.Parser, new[]{ "Token", "OldPublisher", "NewPublisher" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IdoContract.Withdraw), global::IdoContract.Withdraw.Parser, new[]{ "PubilicId", "To", "WantToken", "OfferingToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IdoContract.Invest), global::IdoContract.Invest.Parser, new[]{ "PublicId", "Investor", "Token", "Income", "Spend" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IdoContract.Harvest), global::IdoContract.Harvest.Parser, new[]{ "PublicId", "To", "Amount" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// stuct
  /// </summary>
  public sealed partial class PublicOffering : pb::IMessage<PublicOffering> {
    private static readonly pb::MessageParser<PublicOffering> _parser = new pb::MessageParser<PublicOffering>(() => new PublicOffering());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PublicOffering> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IdoContract.IdoContractReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublicOffering() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublicOffering(PublicOffering other) : this() {
      offeringToken_ = other.offeringToken_ != null ? other.offeringToken_.Clone() : null;
      offeringAmount_ = other.offeringAmount_;
      wantToken_ = other.wantToken_ != null ? other.wantToken_.Clone() : null;
      wantTokenAmount_ = other.wantTokenAmount_;
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      publisher_ = other.publisher_ != null ? other.publisher_.Clone() : null;
      claimed_ = other.claimed_;
      wantTokenBalance_ = other.wantTokenBalance_;
      subscribedAmount_ = other.subscribedAmount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublicOffering Clone() {
      return new PublicOffering(this);
    }

    /// <summary>Field number for the "offeringToken" field.</summary>
    public const int OfferingTokenFieldNumber = 1;
    private global::AElf.Types.Address offeringToken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address OfferingToken {
      get { return offeringToken_; }
      set {
        offeringToken_ = value;
      }
    }

    /// <summary>Field number for the "offeringAmount" field.</summary>
    public const int OfferingAmountFieldNumber = 2;
    private long offeringAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OfferingAmount {
      get { return offeringAmount_; }
      set {
        offeringAmount_ = value;
      }
    }

    /// <summary>Field number for the "wantToken" field.</summary>
    public const int WantTokenFieldNumber = 3;
    private global::AElf.Types.Address wantToken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address WantToken {
      get { return wantToken_; }
      set {
        wantToken_ = value;
      }
    }

    /// <summary>Field number for the "wantTokenAmount" field.</summary>
    public const int WantTokenAmountFieldNumber = 4;
    private long wantTokenAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WantTokenAmount {
      get { return wantTokenAmount_; }
      set {
        wantTokenAmount_ = value;
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 5;
    private long startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 6;
    private long endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "publisher" field.</summary>
    public const int PublisherFieldNumber = 7;
    private global::AElf.Types.Address publisher_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Publisher {
      get { return publisher_; }
      set {
        publisher_ = value;
      }
    }

    /// <summary>Field number for the "claimed" field.</summary>
    public const int ClaimedFieldNumber = 8;
    private bool claimed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Claimed {
      get { return claimed_; }
      set {
        claimed_ = value;
      }
    }

    /// <summary>Field number for the "wantTokenBalance" field.</summary>
    public const int WantTokenBalanceFieldNumber = 9;
    private long wantTokenBalance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WantTokenBalance {
      get { return wantTokenBalance_; }
      set {
        wantTokenBalance_ = value;
      }
    }

    /// <summary>Field number for the "subscribedAmount" field.</summary>
    public const int SubscribedAmountFieldNumber = 10;
    private long subscribedAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SubscribedAmount {
      get { return subscribedAmount_; }
      set {
        subscribedAmount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PublicOffering);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PublicOffering other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(OfferingToken, other.OfferingToken)) return false;
      if (OfferingAmount != other.OfferingAmount) return false;
      if (!object.Equals(WantToken, other.WantToken)) return false;
      if (WantTokenAmount != other.WantTokenAmount) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      if (!object.Equals(Publisher, other.Publisher)) return false;
      if (Claimed != other.Claimed) return false;
      if (WantTokenBalance != other.WantTokenBalance) return false;
      if (SubscribedAmount != other.SubscribedAmount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (offeringToken_ != null) hash ^= OfferingToken.GetHashCode();
      if (OfferingAmount != 0L) hash ^= OfferingAmount.GetHashCode();
      if (wantToken_ != null) hash ^= WantToken.GetHashCode();
      if (WantTokenAmount != 0L) hash ^= WantTokenAmount.GetHashCode();
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      if (EndTime != 0L) hash ^= EndTime.GetHashCode();
      if (publisher_ != null) hash ^= Publisher.GetHashCode();
      if (Claimed != false) hash ^= Claimed.GetHashCode();
      if (WantTokenBalance != 0L) hash ^= WantTokenBalance.GetHashCode();
      if (SubscribedAmount != 0L) hash ^= SubscribedAmount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (offeringToken_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(OfferingToken);
      }
      if (OfferingAmount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(OfferingAmount);
      }
      if (wantToken_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(WantToken);
      }
      if (WantTokenAmount != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(WantTokenAmount);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(StartTime);
      }
      if (EndTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(EndTime);
      }
      if (publisher_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Publisher);
      }
      if (Claimed != false) {
        output.WriteRawTag(64);
        output.WriteBool(Claimed);
      }
      if (WantTokenBalance != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(WantTokenBalance);
      }
      if (SubscribedAmount != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(SubscribedAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (offeringToken_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OfferingToken);
      }
      if (OfferingAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OfferingAmount);
      }
      if (wantToken_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WantToken);
      }
      if (WantTokenAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WantTokenAmount);
      }
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (EndTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
      }
      if (publisher_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Publisher);
      }
      if (Claimed != false) {
        size += 1 + 1;
      }
      if (WantTokenBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WantTokenBalance);
      }
      if (SubscribedAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SubscribedAmount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PublicOffering other) {
      if (other == null) {
        return;
      }
      if (other.offeringToken_ != null) {
        if (offeringToken_ == null) {
          OfferingToken = new global::AElf.Types.Address();
        }
        OfferingToken.MergeFrom(other.OfferingToken);
      }
      if (other.OfferingAmount != 0L) {
        OfferingAmount = other.OfferingAmount;
      }
      if (other.wantToken_ != null) {
        if (wantToken_ == null) {
          WantToken = new global::AElf.Types.Address();
        }
        WantToken.MergeFrom(other.WantToken);
      }
      if (other.WantTokenAmount != 0L) {
        WantTokenAmount = other.WantTokenAmount;
      }
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
      if (other.EndTime != 0L) {
        EndTime = other.EndTime;
      }
      if (other.publisher_ != null) {
        if (publisher_ == null) {
          Publisher = new global::AElf.Types.Address();
        }
        Publisher.MergeFrom(other.Publisher);
      }
      if (other.Claimed != false) {
        Claimed = other.Claimed;
      }
      if (other.WantTokenBalance != 0L) {
        WantTokenBalance = other.WantTokenBalance;
      }
      if (other.SubscribedAmount != 0L) {
        SubscribedAmount = other.SubscribedAmount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (offeringToken_ == null) {
              OfferingToken = new global::AElf.Types.Address();
            }
            input.ReadMessage(OfferingToken);
            break;
          }
          case 16: {
            OfferingAmount = input.ReadInt64();
            break;
          }
          case 26: {
            if (wantToken_ == null) {
              WantToken = new global::AElf.Types.Address();
            }
            input.ReadMessage(WantToken);
            break;
          }
          case 32: {
            WantTokenAmount = input.ReadInt64();
            break;
          }
          case 40: {
            StartTime = input.ReadInt64();
            break;
          }
          case 48: {
            EndTime = input.ReadInt64();
            break;
          }
          case 58: {
            if (publisher_ == null) {
              Publisher = new global::AElf.Types.Address();
            }
            input.ReadMessage(Publisher);
            break;
          }
          case 64: {
            Claimed = input.ReadBool();
            break;
          }
          case 72: {
            WantTokenBalance = input.ReadInt64();
            break;
          }
          case 80: {
            SubscribedAmount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserInfo : pb::IMessage<UserInfo> {
    private static readonly pb::MessageParser<UserInfo> _parser = new pb::MessageParser<UserInfo>(() => new UserInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IdoContract.IdoContractReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo(UserInfo other) : this() {
      claimed_ = other.claimed_;
      obtainAmount_ = other.obtainAmount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo Clone() {
      return new UserInfo(this);
    }

    /// <summary>Field number for the "claimed" field.</summary>
    public const int ClaimedFieldNumber = 1;
    private bool claimed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Claimed {
      get { return claimed_; }
      set {
        claimed_ = value;
      }
    }

    /// <summary>Field number for the "obtainAmount" field.</summary>
    public const int ObtainAmountFieldNumber = 2;
    private long obtainAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ObtainAmount {
      get { return obtainAmount_; }
      set {
        obtainAmount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Claimed != other.Claimed) return false;
      if (ObtainAmount != other.ObtainAmount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Claimed != false) hash ^= Claimed.GetHashCode();
      if (ObtainAmount != 0L) hash ^= ObtainAmount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Claimed != false) {
        output.WriteRawTag(8);
        output.WriteBool(Claimed);
      }
      if (ObtainAmount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ObtainAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Claimed != false) {
        size += 1 + 1;
      }
      if (ObtainAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ObtainAmount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserInfo other) {
      if (other == null) {
        return;
      }
      if (other.Claimed != false) {
        Claimed = other.Claimed;
      }
      if (other.ObtainAmount != 0L) {
        ObtainAmount = other.ObtainAmount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Claimed = input.ReadBool();
            break;
          }
          case 16: {
            ObtainAmount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PublicOfferList : pb::IMessage<PublicOfferList> {
    private static readonly pb::MessageParser<PublicOfferList> _parser = new pb::MessageParser<PublicOfferList>(() => new PublicOfferList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PublicOfferList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IdoContract.IdoContractReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublicOfferList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublicOfferList(PublicOfferList other) : this() {
      publicOffer_ = other.publicOffer_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublicOfferList Clone() {
      return new PublicOfferList(this);
    }

    /// <summary>Field number for the "publicOffer" field.</summary>
    public const int PublicOfferFieldNumber = 1;
    private static readonly pb::FieldCodec<global::IdoContract.PublicOffering> _repeated_publicOffer_codec
        = pb::FieldCodec.ForMessage(10, global::IdoContract.PublicOffering.Parser);
    private readonly pbc::RepeatedField<global::IdoContract.PublicOffering> publicOffer_ = new pbc::RepeatedField<global::IdoContract.PublicOffering>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IdoContract.PublicOffering> PublicOffer {
      get { return publicOffer_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PublicOfferList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PublicOfferList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!publicOffer_.Equals(other.publicOffer_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= publicOffer_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      publicOffer_.WriteTo(output, _repeated_publicOffer_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += publicOffer_.CalculateSize(_repeated_publicOffer_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PublicOfferList other) {
      if (other == null) {
        return;
      }
      publicOffer_.Add(other.publicOffer_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            publicOffer_.AddEntriesFrom(input, _repeated_publicOffer_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddPublicOfferingInput : pb::IMessage<AddPublicOfferingInput> {
    private static readonly pb::MessageParser<AddPublicOfferingInput> _parser = new pb::MessageParser<AddPublicOfferingInput>(() => new AddPublicOfferingInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddPublicOfferingInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IdoContract.IdoContractReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddPublicOfferingInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddPublicOfferingInput(AddPublicOfferingInput other) : this() {
      offeringToken_ = other.offeringToken_ != null ? other.offeringToken_.Clone() : null;
      offeringAmount_ = other.offeringAmount_;
      wantToken_ = other.wantToken_ != null ? other.wantToken_.Clone() : null;
      wantTokenAmount_ = other.wantTokenAmount_;
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddPublicOfferingInput Clone() {
      return new AddPublicOfferingInput(this);
    }

    /// <summary>Field number for the "offeringToken" field.</summary>
    public const int OfferingTokenFieldNumber = 1;
    private global::AElf.Types.Address offeringToken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address OfferingToken {
      get { return offeringToken_; }
      set {
        offeringToken_ = value;
      }
    }

    /// <summary>Field number for the "offeringAmount" field.</summary>
    public const int OfferingAmountFieldNumber = 2;
    private long offeringAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OfferingAmount {
      get { return offeringAmount_; }
      set {
        offeringAmount_ = value;
      }
    }

    /// <summary>Field number for the "wantToken" field.</summary>
    public const int WantTokenFieldNumber = 3;
    private global::AElf.Types.Address wantToken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address WantToken {
      get { return wantToken_; }
      set {
        wantToken_ = value;
      }
    }

    /// <summary>Field number for the "wantTokenAmount" field.</summary>
    public const int WantTokenAmountFieldNumber = 4;
    private long wantTokenAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WantTokenAmount {
      get { return wantTokenAmount_; }
      set {
        wantTokenAmount_ = value;
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 5;
    private long startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 6;
    private long endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddPublicOfferingInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddPublicOfferingInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(OfferingToken, other.OfferingToken)) return false;
      if (OfferingAmount != other.OfferingAmount) return false;
      if (!object.Equals(WantToken, other.WantToken)) return false;
      if (WantTokenAmount != other.WantTokenAmount) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (offeringToken_ != null) hash ^= OfferingToken.GetHashCode();
      if (OfferingAmount != 0L) hash ^= OfferingAmount.GetHashCode();
      if (wantToken_ != null) hash ^= WantToken.GetHashCode();
      if (WantTokenAmount != 0L) hash ^= WantTokenAmount.GetHashCode();
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      if (EndTime != 0L) hash ^= EndTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (offeringToken_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(OfferingToken);
      }
      if (OfferingAmount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(OfferingAmount);
      }
      if (wantToken_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(WantToken);
      }
      if (WantTokenAmount != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(WantTokenAmount);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(StartTime);
      }
      if (EndTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(EndTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (offeringToken_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OfferingToken);
      }
      if (OfferingAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OfferingAmount);
      }
      if (wantToken_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WantToken);
      }
      if (WantTokenAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WantTokenAmount);
      }
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (EndTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddPublicOfferingInput other) {
      if (other == null) {
        return;
      }
      if (other.offeringToken_ != null) {
        if (offeringToken_ == null) {
          OfferingToken = new global::AElf.Types.Address();
        }
        OfferingToken.MergeFrom(other.OfferingToken);
      }
      if (other.OfferingAmount != 0L) {
        OfferingAmount = other.OfferingAmount;
      }
      if (other.wantToken_ != null) {
        if (wantToken_ == null) {
          WantToken = new global::AElf.Types.Address();
        }
        WantToken.MergeFrom(other.WantToken);
      }
      if (other.WantTokenAmount != 0L) {
        WantTokenAmount = other.WantTokenAmount;
      }
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
      if (other.EndTime != 0L) {
        EndTime = other.EndTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (offeringToken_ == null) {
              OfferingToken = new global::AElf.Types.Address();
            }
            input.ReadMessage(OfferingToken);
            break;
          }
          case 16: {
            OfferingAmount = input.ReadInt64();
            break;
          }
          case 26: {
            if (wantToken_ == null) {
              WantToken = new global::AElf.Types.Address();
            }
            input.ReadMessage(WantToken);
            break;
          }
          case 32: {
            WantTokenAmount = input.ReadInt64();
            break;
          }
          case 40: {
            StartTime = input.ReadInt64();
            break;
          }
          case 48: {
            EndTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChangeAscriptionInput : pb::IMessage<ChangeAscriptionInput> {
    private static readonly pb::MessageParser<ChangeAscriptionInput> _parser = new pb::MessageParser<ChangeAscriptionInput>(() => new ChangeAscriptionInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeAscriptionInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IdoContract.IdoContractReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeAscriptionInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeAscriptionInput(ChangeAscriptionInput other) : this() {
      token_ = other.token_ != null ? other.token_.Clone() : null;
      receiver_ = other.receiver_ != null ? other.receiver_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeAscriptionInput Clone() {
      return new ChangeAscriptionInput(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private global::AElf.Types.Address token_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Token {
      get { return token_; }
      set {
        token_ = value;
      }
    }

    /// <summary>Field number for the "receiver" field.</summary>
    public const int ReceiverFieldNumber = 2;
    private global::AElf.Types.Address receiver_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Receiver {
      get { return receiver_; }
      set {
        receiver_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeAscriptionInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeAscriptionInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Token, other.Token)) return false;
      if (!object.Equals(Receiver, other.Receiver)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (token_ != null) hash ^= Token.GetHashCode();
      if (receiver_ != null) hash ^= Receiver.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (token_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Token);
      }
      if (receiver_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Receiver);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (token_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Token);
      }
      if (receiver_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Receiver);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeAscriptionInput other) {
      if (other == null) {
        return;
      }
      if (other.token_ != null) {
        if (token_ == null) {
          Token = new global::AElf.Types.Address();
        }
        Token.MergeFrom(other.Token);
      }
      if (other.receiver_ != null) {
        if (receiver_ == null) {
          Receiver = new global::AElf.Types.Address();
        }
        Receiver.MergeFrom(other.Receiver);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (token_ == null) {
              Token = new global::AElf.Types.Address();
            }
            input.ReadMessage(Token);
            break;
          }
          case 18: {
            if (receiver_ == null) {
              Receiver = new global::AElf.Types.Address();
            }
            input.ReadMessage(Receiver);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InvestPublicOfferingInput : pb::IMessage<InvestPublicOfferingInput> {
    private static readonly pb::MessageParser<InvestPublicOfferingInput> _parser = new pb::MessageParser<InvestPublicOfferingInput>(() => new InvestPublicOfferingInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InvestPublicOfferingInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IdoContract.IdoContractReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvestPublicOfferingInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvestPublicOfferingInput(InvestPublicOfferingInput other) : this() {
      publicId_ = other.publicId_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvestPublicOfferingInput Clone() {
      return new InvestPublicOfferingInput(this);
    }

    /// <summary>Field number for the "publicId" field.</summary>
    public const int PublicIdFieldNumber = 1;
    private long publicId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PublicId {
      get { return publicId_; }
      set {
        publicId_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InvestPublicOfferingInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InvestPublicOfferingInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PublicId != other.PublicId) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PublicId != 0L) hash ^= PublicId.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PublicId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PublicId);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PublicId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PublicId);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InvestPublicOfferingInput other) {
      if (other == null) {
        return;
      }
      if (other.PublicId != 0L) {
        PublicId = other.PublicId;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PublicId = input.ReadInt64();
            break;
          }
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResetTimeSpanInput : pb::IMessage<ResetTimeSpanInput> {
    private static readonly pb::MessageParser<ResetTimeSpanInput> _parser = new pb::MessageParser<ResetTimeSpanInput>(() => new ResetTimeSpanInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResetTimeSpanInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IdoContract.IdoContractReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetTimeSpanInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetTimeSpanInput(ResetTimeSpanInput other) : this() {
      maxTimespan_ = other.maxTimespan_;
      minTimespan_ = other.minTimespan_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetTimeSpanInput Clone() {
      return new ResetTimeSpanInput(this);
    }

    /// <summary>Field number for the "maxTimespan" field.</summary>
    public const int MaxTimespanFieldNumber = 1;
    private long maxTimespan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxTimespan {
      get { return maxTimespan_; }
      set {
        maxTimespan_ = value;
      }
    }

    /// <summary>Field number for the "minTimespan" field.</summary>
    public const int MinTimespanFieldNumber = 2;
    private long minTimespan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MinTimespan {
      get { return minTimespan_; }
      set {
        minTimespan_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResetTimeSpanInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResetTimeSpanInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxTimespan != other.MaxTimespan) return false;
      if (MinTimespan != other.MinTimespan) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxTimespan != 0L) hash ^= MaxTimespan.GetHashCode();
      if (MinTimespan != 0L) hash ^= MinTimespan.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxTimespan != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MaxTimespan);
      }
      if (MinTimespan != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(MinTimespan);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxTimespan != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxTimespan);
      }
      if (MinTimespan != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinTimespan);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResetTimeSpanInput other) {
      if (other == null) {
        return;
      }
      if (other.MaxTimespan != 0L) {
        MaxTimespan = other.MaxTimespan;
      }
      if (other.MinTimespan != 0L) {
        MinTimespan = other.MinTimespan;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MaxTimespan = input.ReadInt64();
            break;
          }
          case 16: {
            MinTimespan = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Events
  /// </summary>
  public sealed partial class AddPublicOffering : pb::IMessage<AddPublicOffering> {
    private static readonly pb::MessageParser<AddPublicOffering> _parser = new pb::MessageParser<AddPublicOffering>(() => new AddPublicOffering());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddPublicOffering> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IdoContract.IdoContractReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddPublicOffering() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddPublicOffering(AddPublicOffering other) : this() {
      offeringToken_ = other.offeringToken_ != null ? other.offeringToken_.Clone() : null;
      offeringAmount_ = other.offeringAmount_;
      wantTokenAmount_ = other.wantTokenAmount_ != null ? other.wantTokenAmount_.Clone() : null;
      publisher_ = other.publisher_ != null ? other.publisher_.Clone() : null;
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      publicId_ = other.publicId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddPublicOffering Clone() {
      return new AddPublicOffering(this);
    }

    /// <summary>Field number for the "offeringToken" field.</summary>
    public const int OfferingTokenFieldNumber = 1;
    private global::AElf.Types.Address offeringToken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address OfferingToken {
      get { return offeringToken_; }
      set {
        offeringToken_ = value;
      }
    }

    /// <summary>Field number for the "offeringAmount" field.</summary>
    public const int OfferingAmountFieldNumber = 2;
    private long offeringAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OfferingAmount {
      get { return offeringAmount_; }
      set {
        offeringAmount_ = value;
      }
    }

    /// <summary>Field number for the "wantTokenAmount" field.</summary>
    public const int WantTokenAmountFieldNumber = 3;
    private global::AElf.Types.Address wantTokenAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address WantTokenAmount {
      get { return wantTokenAmount_; }
      set {
        wantTokenAmount_ = value;
      }
    }

    /// <summary>Field number for the "publisher" field.</summary>
    public const int PublisherFieldNumber = 4;
    private global::AElf.Types.Address publisher_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Publisher {
      get { return publisher_; }
      set {
        publisher_ = value;
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 5;
    private long startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 6;
    private long endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "publicId" field.</summary>
    public const int PublicIdFieldNumber = 7;
    private long publicId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PublicId {
      get { return publicId_; }
      set {
        publicId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddPublicOffering);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddPublicOffering other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(OfferingToken, other.OfferingToken)) return false;
      if (OfferingAmount != other.OfferingAmount) return false;
      if (!object.Equals(WantTokenAmount, other.WantTokenAmount)) return false;
      if (!object.Equals(Publisher, other.Publisher)) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      if (PublicId != other.PublicId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (offeringToken_ != null) hash ^= OfferingToken.GetHashCode();
      if (OfferingAmount != 0L) hash ^= OfferingAmount.GetHashCode();
      if (wantTokenAmount_ != null) hash ^= WantTokenAmount.GetHashCode();
      if (publisher_ != null) hash ^= Publisher.GetHashCode();
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      if (EndTime != 0L) hash ^= EndTime.GetHashCode();
      if (PublicId != 0L) hash ^= PublicId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (offeringToken_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(OfferingToken);
      }
      if (OfferingAmount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(OfferingAmount);
      }
      if (wantTokenAmount_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(WantTokenAmount);
      }
      if (publisher_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Publisher);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(StartTime);
      }
      if (EndTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(EndTime);
      }
      if (PublicId != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(PublicId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (offeringToken_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OfferingToken);
      }
      if (OfferingAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OfferingAmount);
      }
      if (wantTokenAmount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WantTokenAmount);
      }
      if (publisher_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Publisher);
      }
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (EndTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
      }
      if (PublicId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PublicId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddPublicOffering other) {
      if (other == null) {
        return;
      }
      if (other.offeringToken_ != null) {
        if (offeringToken_ == null) {
          OfferingToken = new global::AElf.Types.Address();
        }
        OfferingToken.MergeFrom(other.OfferingToken);
      }
      if (other.OfferingAmount != 0L) {
        OfferingAmount = other.OfferingAmount;
      }
      if (other.wantTokenAmount_ != null) {
        if (wantTokenAmount_ == null) {
          WantTokenAmount = new global::AElf.Types.Address();
        }
        WantTokenAmount.MergeFrom(other.WantTokenAmount);
      }
      if (other.publisher_ != null) {
        if (publisher_ == null) {
          Publisher = new global::AElf.Types.Address();
        }
        Publisher.MergeFrom(other.Publisher);
      }
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
      if (other.EndTime != 0L) {
        EndTime = other.EndTime;
      }
      if (other.PublicId != 0L) {
        PublicId = other.PublicId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (offeringToken_ == null) {
              OfferingToken = new global::AElf.Types.Address();
            }
            input.ReadMessage(OfferingToken);
            break;
          }
          case 16: {
            OfferingAmount = input.ReadInt64();
            break;
          }
          case 26: {
            if (wantTokenAmount_ == null) {
              WantTokenAmount = new global::AElf.Types.Address();
            }
            input.ReadMessage(WantTokenAmount);
            break;
          }
          case 34: {
            if (publisher_ == null) {
              Publisher = new global::AElf.Types.Address();
            }
            input.ReadMessage(Publisher);
            break;
          }
          case 40: {
            StartTime = input.ReadInt64();
            break;
          }
          case 48: {
            EndTime = input.ReadInt64();
            break;
          }
          case 56: {
            PublicId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChangeAscription : pb::IMessage<ChangeAscription> {
    private static readonly pb::MessageParser<ChangeAscription> _parser = new pb::MessageParser<ChangeAscription>(() => new ChangeAscription());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeAscription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IdoContract.IdoContractReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeAscription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeAscription(ChangeAscription other) : this() {
      token_ = other.token_ != null ? other.token_.Clone() : null;
      oldPublisher_ = other.oldPublisher_ != null ? other.oldPublisher_.Clone() : null;
      newPublisher_ = other.newPublisher_ != null ? other.newPublisher_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeAscription Clone() {
      return new ChangeAscription(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private global::AElf.Types.Address token_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Token {
      get { return token_; }
      set {
        token_ = value;
      }
    }

    /// <summary>Field number for the "oldPublisher" field.</summary>
    public const int OldPublisherFieldNumber = 2;
    private global::AElf.Types.Address oldPublisher_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address OldPublisher {
      get { return oldPublisher_; }
      set {
        oldPublisher_ = value;
      }
    }

    /// <summary>Field number for the "newPublisher" field.</summary>
    public const int NewPublisherFieldNumber = 3;
    private global::AElf.Types.Address newPublisher_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address NewPublisher {
      get { return newPublisher_; }
      set {
        newPublisher_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeAscription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeAscription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Token, other.Token)) return false;
      if (!object.Equals(OldPublisher, other.OldPublisher)) return false;
      if (!object.Equals(NewPublisher, other.NewPublisher)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (token_ != null) hash ^= Token.GetHashCode();
      if (oldPublisher_ != null) hash ^= OldPublisher.GetHashCode();
      if (newPublisher_ != null) hash ^= NewPublisher.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (token_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Token);
      }
      if (oldPublisher_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OldPublisher);
      }
      if (newPublisher_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(NewPublisher);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (token_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Token);
      }
      if (oldPublisher_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OldPublisher);
      }
      if (newPublisher_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewPublisher);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeAscription other) {
      if (other == null) {
        return;
      }
      if (other.token_ != null) {
        if (token_ == null) {
          Token = new global::AElf.Types.Address();
        }
        Token.MergeFrom(other.Token);
      }
      if (other.oldPublisher_ != null) {
        if (oldPublisher_ == null) {
          OldPublisher = new global::AElf.Types.Address();
        }
        OldPublisher.MergeFrom(other.OldPublisher);
      }
      if (other.newPublisher_ != null) {
        if (newPublisher_ == null) {
          NewPublisher = new global::AElf.Types.Address();
        }
        NewPublisher.MergeFrom(other.NewPublisher);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (token_ == null) {
              Token = new global::AElf.Types.Address();
            }
            input.ReadMessage(Token);
            break;
          }
          case 18: {
            if (oldPublisher_ == null) {
              OldPublisher = new global::AElf.Types.Address();
            }
            input.ReadMessage(OldPublisher);
            break;
          }
          case 26: {
            if (newPublisher_ == null) {
              NewPublisher = new global::AElf.Types.Address();
            }
            input.ReadMessage(NewPublisher);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Withdraw : pb::IMessage<Withdraw> {
    private static readonly pb::MessageParser<Withdraw> _parser = new pb::MessageParser<Withdraw>(() => new Withdraw());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Withdraw> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IdoContract.IdoContractReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Withdraw() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Withdraw(Withdraw other) : this() {
      pubilicId_ = other.pubilicId_;
      to_ = other.to_ != null ? other.to_.Clone() : null;
      wantToken_ = other.wantToken_;
      offeringToken_ = other.offeringToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Withdraw Clone() {
      return new Withdraw(this);
    }

    /// <summary>Field number for the "pubilicId" field.</summary>
    public const int PubilicIdFieldNumber = 1;
    private long pubilicId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PubilicId {
      get { return pubilicId_; }
      set {
        pubilicId_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 2;
    private global::AElf.Types.Address to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    /// <summary>Field number for the "wantToken" field.</summary>
    public const int WantTokenFieldNumber = 3;
    private long wantToken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WantToken {
      get { return wantToken_; }
      set {
        wantToken_ = value;
      }
    }

    /// <summary>Field number for the "offeringToken" field.</summary>
    public const int OfferingTokenFieldNumber = 4;
    private long offeringToken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OfferingToken {
      get { return offeringToken_; }
      set {
        offeringToken_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Withdraw);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Withdraw other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PubilicId != other.PubilicId) return false;
      if (!object.Equals(To, other.To)) return false;
      if (WantToken != other.WantToken) return false;
      if (OfferingToken != other.OfferingToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PubilicId != 0L) hash ^= PubilicId.GetHashCode();
      if (to_ != null) hash ^= To.GetHashCode();
      if (WantToken != 0L) hash ^= WantToken.GetHashCode();
      if (OfferingToken != 0L) hash ^= OfferingToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PubilicId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PubilicId);
      }
      if (to_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(To);
      }
      if (WantToken != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(WantToken);
      }
      if (OfferingToken != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(OfferingToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PubilicId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PubilicId);
      }
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (WantToken != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WantToken);
      }
      if (OfferingToken != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OfferingToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Withdraw other) {
      if (other == null) {
        return;
      }
      if (other.PubilicId != 0L) {
        PubilicId = other.PubilicId;
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::AElf.Types.Address();
        }
        To.MergeFrom(other.To);
      }
      if (other.WantToken != 0L) {
        WantToken = other.WantToken;
      }
      if (other.OfferingToken != 0L) {
        OfferingToken = other.OfferingToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PubilicId = input.ReadInt64();
            break;
          }
          case 18: {
            if (to_ == null) {
              To = new global::AElf.Types.Address();
            }
            input.ReadMessage(To);
            break;
          }
          case 24: {
            WantToken = input.ReadInt64();
            break;
          }
          case 32: {
            OfferingToken = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Invest : pb::IMessage<Invest> {
    private static readonly pb::MessageParser<Invest> _parser = new pb::MessageParser<Invest>(() => new Invest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Invest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IdoContract.IdoContractReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Invest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Invest(Invest other) : this() {
      publicId_ = other.publicId_;
      investor_ = other.investor_ != null ? other.investor_.Clone() : null;
      token_ = other.token_ != null ? other.token_.Clone() : null;
      income_ = other.income_;
      spend_ = other.spend_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Invest Clone() {
      return new Invest(this);
    }

    /// <summary>Field number for the "publicId" field.</summary>
    public const int PublicIdFieldNumber = 1;
    private long publicId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PublicId {
      get { return publicId_; }
      set {
        publicId_ = value;
      }
    }

    /// <summary>Field number for the "investor" field.</summary>
    public const int InvestorFieldNumber = 2;
    private global::AElf.Types.Address investor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Investor {
      get { return investor_; }
      set {
        investor_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 3;
    private global::AElf.Types.Address token_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Token {
      get { return token_; }
      set {
        token_ = value;
      }
    }

    /// <summary>Field number for the "income" field.</summary>
    public const int IncomeFieldNumber = 4;
    private long income_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Income {
      get { return income_; }
      set {
        income_ = value;
      }
    }

    /// <summary>Field number for the "spend" field.</summary>
    public const int SpendFieldNumber = 5;
    private long spend_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Spend {
      get { return spend_; }
      set {
        spend_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Invest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Invest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PublicId != other.PublicId) return false;
      if (!object.Equals(Investor, other.Investor)) return false;
      if (!object.Equals(Token, other.Token)) return false;
      if (Income != other.Income) return false;
      if (Spend != other.Spend) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PublicId != 0L) hash ^= PublicId.GetHashCode();
      if (investor_ != null) hash ^= Investor.GetHashCode();
      if (token_ != null) hash ^= Token.GetHashCode();
      if (Income != 0L) hash ^= Income.GetHashCode();
      if (Spend != 0L) hash ^= Spend.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PublicId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PublicId);
      }
      if (investor_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Investor);
      }
      if (token_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Token);
      }
      if (Income != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Income);
      }
      if (Spend != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Spend);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PublicId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PublicId);
      }
      if (investor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Investor);
      }
      if (token_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Token);
      }
      if (Income != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Income);
      }
      if (Spend != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Spend);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Invest other) {
      if (other == null) {
        return;
      }
      if (other.PublicId != 0L) {
        PublicId = other.PublicId;
      }
      if (other.investor_ != null) {
        if (investor_ == null) {
          Investor = new global::AElf.Types.Address();
        }
        Investor.MergeFrom(other.Investor);
      }
      if (other.token_ != null) {
        if (token_ == null) {
          Token = new global::AElf.Types.Address();
        }
        Token.MergeFrom(other.Token);
      }
      if (other.Income != 0L) {
        Income = other.Income;
      }
      if (other.Spend != 0L) {
        Spend = other.Spend;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PublicId = input.ReadInt64();
            break;
          }
          case 18: {
            if (investor_ == null) {
              Investor = new global::AElf.Types.Address();
            }
            input.ReadMessage(Investor);
            break;
          }
          case 26: {
            if (token_ == null) {
              Token = new global::AElf.Types.Address();
            }
            input.ReadMessage(Token);
            break;
          }
          case 32: {
            Income = input.ReadInt64();
            break;
          }
          case 40: {
            Spend = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Harvest : pb::IMessage<Harvest> {
    private static readonly pb::MessageParser<Harvest> _parser = new pb::MessageParser<Harvest>(() => new Harvest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Harvest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IdoContract.IdoContractReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Harvest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Harvest(Harvest other) : this() {
      publicId_ = other.publicId_;
      to_ = other.to_ != null ? other.to_.Clone() : null;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Harvest Clone() {
      return new Harvest(this);
    }

    /// <summary>Field number for the "publicId" field.</summary>
    public const int PublicIdFieldNumber = 1;
    private long publicId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PublicId {
      get { return publicId_; }
      set {
        publicId_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 2;
    private global::AElf.Types.Address to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Harvest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Harvest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PublicId != other.PublicId) return false;
      if (!object.Equals(To, other.To)) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PublicId != 0L) hash ^= PublicId.GetHashCode();
      if (to_ != null) hash ^= To.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PublicId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PublicId);
      }
      if (to_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(To);
      }
      if (Amount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PublicId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PublicId);
      }
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Harvest other) {
      if (other == null) {
        return;
      }
      if (other.PublicId != 0L) {
        PublicId = other.PublicId;
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::AElf.Types.Address();
        }
        To.MergeFrom(other.To);
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PublicId = input.ReadInt64();
            break;
          }
          case 18: {
            if (to_ == null) {
              To = new global::AElf.Types.Address();
            }
            input.ReadMessage(To);
            break;
          }
          case 24: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
