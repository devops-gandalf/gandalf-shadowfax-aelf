// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: lottery_contract.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AElf.Contracts.LotteryContract {

  /// <summary>Holder for reflection information generated from lottery_contract.proto</summary>
  public static partial class LotteryContractReflection {

    #region Descriptor
    /// <summary>File descriptor for lottery_contract.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LotteryContractReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZsb3R0ZXJ5X2NvbnRyYWN0LnByb3RvGg9hZWxmL2NvcmUucHJvdG8aEmFl",
            "bGYvb3B0aW9ucy5wcm90bxobZ29vZ2xlL3Byb3RvYnVmL2VtcHR5LnByb3Rv",
            "Gh5nb29nbGUvcHJvdG9idWYvd3JhcHBlcnMucHJvdG8aH2dvb2dsZS9wcm90",
            "b2J1Zi90aW1lc3RhbXAucHJvdG8iYwoPSW5pdGlhbGl6ZUlucHV0EhQKDHRv",
            "a2VuX3N5bWJvbBgBIAEoCRIWCg5tYXhpbXVtX2Ftb3VudBgCIAEoAxINCgVw",
            "cmljZRgDIAEoAxITCgtkcmF3aW5nX2xhZxgEIAEoAyI+ChpCb3VnaHRMb3R0",
            "ZXJpZXNJbmZvcm1hdGlvbhIQCghzdGFydF9pZBgBIAEoAxIOCgZhbW91bnQY",
            "AiABKAMiRwoPVGFrZVJld2FyZElucHV0EhIKCmxvdHRlcnlfaWQYASABKAMS",
            "IAoYcmVnaXN0cmF0aW9uX2luZm9ybWF0aW9uGAIgASgJInkKB0xvdHRlcnkS",
            "CgoCaWQYASABKAMSHAoFb3duZXIYAiABKAsyDS5hZWxmLkFkZHJlc3MSEwoL",
            "cmV3YXJkX25hbWUYAyABKAkSDQoFYmxvY2sYBCABKAMSIAoYcmVnaXN0cmF0",
            "aW9uX2luZm9ybWF0aW9uGAUgASgJIvwBCgpQZXJpb2RCb2R5EhQKDGJsb2Nr",
            "X251bWJlchgCIAEoAxIfCgtyYW5kb21faGFzaBgDIAEoCzIKLmFlbGYuSGFz",
            "aBISCgpyZXdhcmRfaWRzGAQgAygDEhAKCHN0YXJ0X2lkGAUgASgDEikKB3Jl",
            "d2FyZHMYBiADKAsyGC5QZXJpb2RCb2R5LlJld2FyZHNFbnRyeRI2ChJzdXBw",
            "b3NlZF9kcmF3X2RhdGUYByABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0",
            "YW1wGi4KDFJld2FyZHNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiAB",
            "KAU6AjgBIhoKC0xvdHRlcnlMaXN0EgsKA2lkcxgBIAMoAyImChRHZXRSZXdh",
            "cmRSZXN1bHRJbnB1dBIOCgZwZXJpb2QYASABKAMibAoVR2V0UmV3YXJkUmVz",
            "dWx0T3V0cHV0Eg4KBnBlcmlvZBgBIAEoAxIfCgtyYW5kb21faGFzaBgCIAEo",
            "CzIKLmFlbGYuSGFzaBIiChByZXdhcmRfbG90dGVyaWVzGAMgAygLMgguTG90",
            "dGVyeSJZChdHZXRCb3VnaHRMb3R0ZXJpZXNJbnB1dBIOCgZwZXJpb2QYASAB",
            "KAMSEAoIc3RhcnRfaWQYAiABKAUSHAoFb3duZXIYAyABKAsyDS5hZWxmLkFk",
            "ZHJlc3MiNwoYR2V0Qm91Z2h0TG90dGVyaWVzT3V0cHV0EhsKCWxvdHRlcmll",
            "cxgDIAMoCzIILkxvdHRlcnkibgoKUmV3YXJkTGlzdBIuCgpyZXdhcmRfbWFw",
            "GAEgAygLMhouUmV3YXJkTGlzdC5SZXdhcmRNYXBFbnRyeRowCg5SZXdhcmRN",
            "YXBFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIrEBCgtS",
            "ZXdhcmRzSW5mbxIOCgZwZXJpb2QYASABKAMSKgoHcmV3YXJkcxgCIAMoCzIZ",
            "LlJld2FyZHNJbmZvLlJld2FyZHNFbnRyeRI2ChJzdXBwb3NlZF9kcmF3X2Rh",
            "dGUYAyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wGi4KDFJld2Fy",
            "ZHNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAU6AjgBIhsKClN0",
            "cmluZ0xpc3QSDQoFdmFsdWUYASADKAkyyg8KD0xvdHRlcnlDb250cmFjdBI4",
            "CgpJbml0aWFsaXplEhAuSW5pdGlhbGl6ZUlucHV0GhYuZ29vZ2xlLnByb3Rv",
            "YnVmLkVtcHR5IgASQQoDQnV5EhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFs",
            "dWUaGy5Cb3VnaHRMb3R0ZXJpZXNJbmZvcm1hdGlvbiIAEj0KBERyYXcSGy5n",
            "b29nbGUucHJvdG9idWYuSW50NjRWYWx1ZRoWLmdvb2dsZS5wcm90b2J1Zi5F",
            "bXB0eSIAEj8KC1ByZXBhcmVEcmF3EhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5",
            "GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASOAoKVGFrZVJld2FyZBIQLlRh",
            "a2VSZXdhcmRJbnB1dBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAEk4KFVJl",
            "c2V0TWF4aW11bUJ1eUFtb3VudBIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZh",
            "bHVlGhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASQwoKUmVzZXRQcmljZRIb",
            "Lmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlGhYuZ29vZ2xlLnByb3RvYnVm",
            "LkVtcHR5IgASSAoPUmVzZXREcmF3aW5nTGFnEhsuZ29vZ2xlLnByb3RvYnVm",
            "LkludDY0VmFsdWUaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABI2Cg1BZGRS",
            "ZXdhcmRMaXN0EgsuUmV3YXJkTGlzdBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0",
            "eSIAEkMKGVNldFJld2FyZExpc3RGb3JPbmVQZXJpb2QSDC5SZXdhcmRzSW5m",
            "bxoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAEjsKB1N1c3BlbmQSFi5nb29n",
            "bGUucHJvdG9idWYuRW1wdHkaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABI7",
            "CgdSZWNvdmVyEhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5GhYuZ29vZ2xlLnBy",
            "b3RvYnVmLkVtcHR5IgASTQoPR2V0UmV3YXJkUmVzdWx0EhsuZ29vZ2xlLnBy",
            "b3RvYnVmLkludDY0VmFsdWUaFi5HZXRSZXdhcmRSZXN1bHRPdXRwdXQiBYiJ",
            "9wEBElAKEkdldEJvdWdodExvdHRlcmllcxIYLkdldEJvdWdodExvdHRlcmll",
            "c0lucHV0GhkuR2V0Qm91Z2h0TG90dGVyaWVzT3V0cHV0IgWIifcBARJLCghH",
            "ZXRTYWxlcxIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlGhsuZ29vZ2xl",
            "LnByb3RvYnVmLkludDY0VmFsdWUiBYiJ9wEBElEKE0dldE1heGltdW1CdXlB",
            "bW91bnQSFi5nb29nbGUucHJvdG9idWYuRW1wdHkaGy5nb29nbGUucHJvdG9i",
            "dWYuSW50NjRWYWx1ZSIFiIn3AQESRgoIR2V0UHJpY2USFi5nb29nbGUucHJv",
            "dG9idWYuRW1wdHkaGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZSIFiIn3",
            "AQESSwoNR2V0RHJhd2luZ0xhZxIWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eRob",
            "Lmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlIgWIifcBARJUChZHZXRDdXJy",
            "ZW50UGVyaW9kTnVtYmVyEhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5GhsuZ29v",
            "Z2xlLnByb3RvYnVmLkludDY0VmFsdWUiBYiJ9wEBEjwKCUdldFBlcmlvZBIb",
            "Lmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlGgsuUGVyaW9kQm9keSIFiIn3",
            "AQESPgoQR2V0Q3VycmVudFBlcmlvZBIWLmdvb2dsZS5wcm90b2J1Zi5FbXB0",
            "eRoLLlBlcmlvZEJvZHkiBYiJ9wEBEjoKCkdldExvdHRlcnkSGy5nb29nbGUu",
            "cHJvdG9idWYuSW50NjRWYWx1ZRoILkxvdHRlcnkiBYiJ9wEBEjsKDUdldFJl",
            "d2FyZExpc3QSFi5nb29nbGUucHJvdG9idWYuRW1wdHkaCy5SZXdhcmRMaXN0",
            "IgWIifcBARJSCg1HZXRSZXdhcmROYW1lEhwuZ29vZ2xlLnByb3RvYnVmLlN0",
            "cmluZ1ZhbHVlGhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlIgWIifcB",
            "ARJMChdHZXRCb3VnaHRMb3R0ZXJpZXNDb3VudBINLmFlbGYuQWRkcmVzcxob",
            "Lmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlIgWIifcBARJSChRHZXRBbGxM",
            "b3R0ZXJpZXNDb3VudBIWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eRobLmdvb2ds",
            "ZS5wcm90b2J1Zi5JbnQ2NFZhbHVlIgWIifcBARJXChlHZXROb1Jld2FyZExv",
            "dHRlcmllc0NvdW50EhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5GhsuZ29vZ2xl",
            "LnByb3RvYnVmLkludDY0VmFsdWUiBYiJ9wEBGjiyzPYBM0FFbGYuQ29udHJh",
            "Y3RzLkxvdHRlcnlDb250cmFjdC5Mb3R0ZXJ5Q29udHJhY3RTdGF0ZUIhqgIe",
            "QUVsZi5Db250cmFjdHMuTG90dGVyeUNvbnRyYWN0YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::AElf.Types.CoreReflection.Descriptor, global::AElf.OptionsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.LotteryContract.InitializeInput), global::AElf.Contracts.LotteryContract.InitializeInput.Parser, new[]{ "TokenSymbol", "MaximumAmount", "Price", "DrawingLag" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.LotteryContract.BoughtLotteriesInformation), global::AElf.Contracts.LotteryContract.BoughtLotteriesInformation.Parser, new[]{ "StartId", "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.LotteryContract.TakeRewardInput), global::AElf.Contracts.LotteryContract.TakeRewardInput.Parser, new[]{ "LotteryId", "RegistrationInformation" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.LotteryContract.Lottery), global::AElf.Contracts.LotteryContract.Lottery.Parser, new[]{ "Id", "Owner", "RewardName", "Block", "RegistrationInformation" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.LotteryContract.PeriodBody), global::AElf.Contracts.LotteryContract.PeriodBody.Parser, new[]{ "BlockNumber", "RandomHash", "RewardIds", "StartId", "Rewards", "SupposedDrawDate" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.LotteryContract.LotteryList), global::AElf.Contracts.LotteryContract.LotteryList.Parser, new[]{ "Ids" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.LotteryContract.GetRewardResultInput), global::AElf.Contracts.LotteryContract.GetRewardResultInput.Parser, new[]{ "Period" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.LotteryContract.GetRewardResultOutput), global::AElf.Contracts.LotteryContract.GetRewardResultOutput.Parser, new[]{ "Period", "RandomHash", "RewardLotteries" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.LotteryContract.GetBoughtLotteriesInput), global::AElf.Contracts.LotteryContract.GetBoughtLotteriesInput.Parser, new[]{ "Period", "StartId", "Owner" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.LotteryContract.GetBoughtLotteriesOutput), global::AElf.Contracts.LotteryContract.GetBoughtLotteriesOutput.Parser, new[]{ "Lotteries" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.LotteryContract.RewardList), global::AElf.Contracts.LotteryContract.RewardList.Parser, new[]{ "RewardMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.LotteryContract.RewardsInfo), global::AElf.Contracts.LotteryContract.RewardsInfo.Parser, new[]{ "Period", "Rewards", "SupposedDrawDate" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.LotteryContract.StringList), global::AElf.Contracts.LotteryContract.StringList.Parser, new[]{ "Value" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class InitializeInput : pb::IMessage<InitializeInput> {
    private static readonly pb::MessageParser<InitializeInput> _parser = new pb::MessageParser<InitializeInput>(() => new InitializeInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitializeInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.LotteryContract.LotteryContractReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput(InitializeInput other) : this() {
      tokenSymbol_ = other.tokenSymbol_;
      maximumAmount_ = other.maximumAmount_;
      price_ = other.price_;
      drawingLag_ = other.drawingLag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput Clone() {
      return new InitializeInput(this);
    }

    /// <summary>Field number for the "token_symbol" field.</summary>
    public const int TokenSymbolFieldNumber = 1;
    private string tokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenSymbol {
      get { return tokenSymbol_; }
      set {
        tokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "maximum_amount" field.</summary>
    public const int MaximumAmountFieldNumber = 2;
    private long maximumAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaximumAmount {
      get { return maximumAmount_; }
      set {
        maximumAmount_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 3;
    private long price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "drawing_lag" field.</summary>
    public const int DrawingLagFieldNumber = 4;
    private long drawingLag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DrawingLag {
      get { return drawingLag_; }
      set {
        drawingLag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitializeInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitializeInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TokenSymbol != other.TokenSymbol) return false;
      if (MaximumAmount != other.MaximumAmount) return false;
      if (Price != other.Price) return false;
      if (DrawingLag != other.DrawingLag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TokenSymbol.Length != 0) hash ^= TokenSymbol.GetHashCode();
      if (MaximumAmount != 0L) hash ^= MaximumAmount.GetHashCode();
      if (Price != 0L) hash ^= Price.GetHashCode();
      if (DrawingLag != 0L) hash ^= DrawingLag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TokenSymbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TokenSymbol);
      }
      if (MaximumAmount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(MaximumAmount);
      }
      if (Price != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Price);
      }
      if (DrawingLag != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(DrawingLag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenSymbol);
      }
      if (MaximumAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaximumAmount);
      }
      if (Price != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Price);
      }
      if (DrawingLag != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DrawingLag);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitializeInput other) {
      if (other == null) {
        return;
      }
      if (other.TokenSymbol.Length != 0) {
        TokenSymbol = other.TokenSymbol;
      }
      if (other.MaximumAmount != 0L) {
        MaximumAmount = other.MaximumAmount;
      }
      if (other.Price != 0L) {
        Price = other.Price;
      }
      if (other.DrawingLag != 0L) {
        DrawingLag = other.DrawingLag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TokenSymbol = input.ReadString();
            break;
          }
          case 16: {
            MaximumAmount = input.ReadInt64();
            break;
          }
          case 24: {
            Price = input.ReadInt64();
            break;
          }
          case 32: {
            DrawingLag = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BoughtLotteriesInformation : pb::IMessage<BoughtLotteriesInformation> {
    private static readonly pb::MessageParser<BoughtLotteriesInformation> _parser = new pb::MessageParser<BoughtLotteriesInformation>(() => new BoughtLotteriesInformation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BoughtLotteriesInformation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.LotteryContract.LotteryContractReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoughtLotteriesInformation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoughtLotteriesInformation(BoughtLotteriesInformation other) : this() {
      startId_ = other.startId_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoughtLotteriesInformation Clone() {
      return new BoughtLotteriesInformation(this);
    }

    /// <summary>Field number for the "start_id" field.</summary>
    public const int StartIdFieldNumber = 1;
    private long startId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartId {
      get { return startId_; }
      set {
        startId_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BoughtLotteriesInformation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BoughtLotteriesInformation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartId != other.StartId) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartId != 0L) hash ^= StartId.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StartId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(StartId);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartId);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BoughtLotteriesInformation other) {
      if (other == null) {
        return;
      }
      if (other.StartId != 0L) {
        StartId = other.StartId;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StartId = input.ReadInt64();
            break;
          }
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TakeRewardInput : pb::IMessage<TakeRewardInput> {
    private static readonly pb::MessageParser<TakeRewardInput> _parser = new pb::MessageParser<TakeRewardInput>(() => new TakeRewardInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TakeRewardInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.LotteryContract.LotteryContractReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeRewardInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeRewardInput(TakeRewardInput other) : this() {
      lotteryId_ = other.lotteryId_;
      registrationInformation_ = other.registrationInformation_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeRewardInput Clone() {
      return new TakeRewardInput(this);
    }

    /// <summary>Field number for the "lottery_id" field.</summary>
    public const int LotteryIdFieldNumber = 1;
    private long lotteryId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LotteryId {
      get { return lotteryId_; }
      set {
        lotteryId_ = value;
      }
    }

    /// <summary>Field number for the "registration_information" field.</summary>
    public const int RegistrationInformationFieldNumber = 2;
    private string registrationInformation_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RegistrationInformation {
      get { return registrationInformation_; }
      set {
        registrationInformation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TakeRewardInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TakeRewardInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LotteryId != other.LotteryId) return false;
      if (RegistrationInformation != other.RegistrationInformation) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LotteryId != 0L) hash ^= LotteryId.GetHashCode();
      if (RegistrationInformation.Length != 0) hash ^= RegistrationInformation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LotteryId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(LotteryId);
      }
      if (RegistrationInformation.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RegistrationInformation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LotteryId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LotteryId);
      }
      if (RegistrationInformation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RegistrationInformation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TakeRewardInput other) {
      if (other == null) {
        return;
      }
      if (other.LotteryId != 0L) {
        LotteryId = other.LotteryId;
      }
      if (other.RegistrationInformation.Length != 0) {
        RegistrationInformation = other.RegistrationInformation;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LotteryId = input.ReadInt64();
            break;
          }
          case 18: {
            RegistrationInformation = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Lottery : pb::IMessage<Lottery> {
    private static readonly pb::MessageParser<Lottery> _parser = new pb::MessageParser<Lottery>(() => new Lottery());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Lottery> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.LotteryContract.LotteryContractReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lottery() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lottery(Lottery other) : this() {
      id_ = other.id_;
      owner_ = other.owner_ != null ? other.owner_.Clone() : null;
      rewardName_ = other.rewardName_;
      block_ = other.block_;
      registrationInformation_ = other.registrationInformation_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lottery Clone() {
      return new Lottery(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 2;
    private global::AElf.Types.Address owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "reward_name" field.</summary>
    public const int RewardNameFieldNumber = 3;
    private string rewardName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RewardName {
      get { return rewardName_; }
      set {
        rewardName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "block" field.</summary>
    public const int BlockFieldNumber = 4;
    private long block_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Block {
      get { return block_; }
      set {
        block_ = value;
      }
    }

    /// <summary>Field number for the "registration_information" field.</summary>
    public const int RegistrationInformationFieldNumber = 5;
    private string registrationInformation_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RegistrationInformation {
      get { return registrationInformation_; }
      set {
        registrationInformation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Lottery);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Lottery other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Owner, other.Owner)) return false;
      if (RewardName != other.RewardName) return false;
      if (Block != other.Block) return false;
      if (RegistrationInformation != other.RegistrationInformation) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (RewardName.Length != 0) hash ^= RewardName.GetHashCode();
      if (Block != 0L) hash ^= Block.GetHashCode();
      if (RegistrationInformation.Length != 0) hash ^= RegistrationInformation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (owner_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Owner);
      }
      if (RewardName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RewardName);
      }
      if (Block != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Block);
      }
      if (RegistrationInformation.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(RegistrationInformation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (RewardName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RewardName);
      }
      if (Block != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Block);
      }
      if (RegistrationInformation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RegistrationInformation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Lottery other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          Owner = new global::AElf.Types.Address();
        }
        Owner.MergeFrom(other.Owner);
      }
      if (other.RewardName.Length != 0) {
        RewardName = other.RewardName;
      }
      if (other.Block != 0L) {
        Block = other.Block;
      }
      if (other.RegistrationInformation.Length != 0) {
        RegistrationInformation = other.RegistrationInformation;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            if (owner_ == null) {
              Owner = new global::AElf.Types.Address();
            }
            input.ReadMessage(Owner);
            break;
          }
          case 26: {
            RewardName = input.ReadString();
            break;
          }
          case 32: {
            Block = input.ReadInt64();
            break;
          }
          case 42: {
            RegistrationInformation = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PeriodBody : pb::IMessage<PeriodBody> {
    private static readonly pb::MessageParser<PeriodBody> _parser = new pb::MessageParser<PeriodBody>(() => new PeriodBody());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PeriodBody> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.LotteryContract.LotteryContractReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeriodBody() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeriodBody(PeriodBody other) : this() {
      blockNumber_ = other.blockNumber_;
      randomHash_ = other.randomHash_ != null ? other.randomHash_.Clone() : null;
      rewardIds_ = other.rewardIds_.Clone();
      startId_ = other.startId_;
      rewards_ = other.rewards_.Clone();
      supposedDrawDate_ = other.supposedDrawDate_ != null ? other.supposedDrawDate_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeriodBody Clone() {
      return new PeriodBody(this);
    }

    /// <summary>Field number for the "block_number" field.</summary>
    public const int BlockNumberFieldNumber = 2;
    private long blockNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BlockNumber {
      get { return blockNumber_; }
      set {
        blockNumber_ = value;
      }
    }

    /// <summary>Field number for the "random_hash" field.</summary>
    public const int RandomHashFieldNumber = 3;
    private global::AElf.Types.Hash randomHash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash RandomHash {
      get { return randomHash_; }
      set {
        randomHash_ = value;
      }
    }

    /// <summary>Field number for the "reward_ids" field.</summary>
    public const int RewardIdsFieldNumber = 4;
    private static readonly pb::FieldCodec<long> _repeated_rewardIds_codec
        = pb::FieldCodec.ForInt64(34);
    private readonly pbc::RepeatedField<long> rewardIds_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> RewardIds {
      get { return rewardIds_; }
    }

    /// <summary>Field number for the "start_id" field.</summary>
    public const int StartIdFieldNumber = 5;
    private long startId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartId {
      get { return startId_; }
      set {
        startId_ = value;
      }
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 6;
    private static readonly pbc::MapField<string, int>.Codec _map_rewards_codec
        = new pbc::MapField<string, int>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForInt32(16, 0), 50);
    private readonly pbc::MapField<string, int> rewards_ = new pbc::MapField<string, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, int> Rewards {
      get { return rewards_; }
    }

    /// <summary>Field number for the "supposed_draw_date" field.</summary>
    public const int SupposedDrawDateFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Timestamp supposedDrawDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp SupposedDrawDate {
      get { return supposedDrawDate_; }
      set {
        supposedDrawDate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PeriodBody);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PeriodBody other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BlockNumber != other.BlockNumber) return false;
      if (!object.Equals(RandomHash, other.RandomHash)) return false;
      if(!rewardIds_.Equals(other.rewardIds_)) return false;
      if (StartId != other.StartId) return false;
      if (!Rewards.Equals(other.Rewards)) return false;
      if (!object.Equals(SupposedDrawDate, other.SupposedDrawDate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BlockNumber != 0L) hash ^= BlockNumber.GetHashCode();
      if (randomHash_ != null) hash ^= RandomHash.GetHashCode();
      hash ^= rewardIds_.GetHashCode();
      if (StartId != 0L) hash ^= StartId.GetHashCode();
      hash ^= Rewards.GetHashCode();
      if (supposedDrawDate_ != null) hash ^= SupposedDrawDate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BlockNumber != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(BlockNumber);
      }
      if (randomHash_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RandomHash);
      }
      rewardIds_.WriteTo(output, _repeated_rewardIds_codec);
      if (StartId != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(StartId);
      }
      rewards_.WriteTo(output, _map_rewards_codec);
      if (supposedDrawDate_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(SupposedDrawDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BlockNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BlockNumber);
      }
      if (randomHash_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RandomHash);
      }
      size += rewardIds_.CalculateSize(_repeated_rewardIds_codec);
      if (StartId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartId);
      }
      size += rewards_.CalculateSize(_map_rewards_codec);
      if (supposedDrawDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SupposedDrawDate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PeriodBody other) {
      if (other == null) {
        return;
      }
      if (other.BlockNumber != 0L) {
        BlockNumber = other.BlockNumber;
      }
      if (other.randomHash_ != null) {
        if (randomHash_ == null) {
          RandomHash = new global::AElf.Types.Hash();
        }
        RandomHash.MergeFrom(other.RandomHash);
      }
      rewardIds_.Add(other.rewardIds_);
      if (other.StartId != 0L) {
        StartId = other.StartId;
      }
      rewards_.Add(other.rewards_);
      if (other.supposedDrawDate_ != null) {
        if (supposedDrawDate_ == null) {
          SupposedDrawDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        SupposedDrawDate.MergeFrom(other.SupposedDrawDate);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            BlockNumber = input.ReadInt64();
            break;
          }
          case 26: {
            if (randomHash_ == null) {
              RandomHash = new global::AElf.Types.Hash();
            }
            input.ReadMessage(RandomHash);
            break;
          }
          case 34:
          case 32: {
            rewardIds_.AddEntriesFrom(input, _repeated_rewardIds_codec);
            break;
          }
          case 40: {
            StartId = input.ReadInt64();
            break;
          }
          case 50: {
            rewards_.AddEntriesFrom(input, _map_rewards_codec);
            break;
          }
          case 58: {
            if (supposedDrawDate_ == null) {
              SupposedDrawDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(SupposedDrawDate);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LotteryList : pb::IMessage<LotteryList> {
    private static readonly pb::MessageParser<LotteryList> _parser = new pb::MessageParser<LotteryList>(() => new LotteryList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LotteryList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.LotteryContract.LotteryContractReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LotteryList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LotteryList(LotteryList other) : this() {
      ids_ = other.ids_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LotteryList Clone() {
      return new LotteryList(this);
    }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_ids_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> ids_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Ids {
      get { return ids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LotteryList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LotteryList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ids_.Equals(other.ids_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ids_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ids_.WriteTo(output, _repeated_ids_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ids_.CalculateSize(_repeated_ids_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LotteryList other) {
      if (other == null) {
        return;
      }
      ids_.Add(other.ids_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetRewardResultInput : pb::IMessage<GetRewardResultInput> {
    private static readonly pb::MessageParser<GetRewardResultInput> _parser = new pb::MessageParser<GetRewardResultInput>(() => new GetRewardResultInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRewardResultInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.LotteryContract.LotteryContractReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRewardResultInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRewardResultInput(GetRewardResultInput other) : this() {
      period_ = other.period_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRewardResultInput Clone() {
      return new GetRewardResultInput(this);
    }

    /// <summary>Field number for the "period" field.</summary>
    public const int PeriodFieldNumber = 1;
    private long period_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Period {
      get { return period_; }
      set {
        period_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRewardResultInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRewardResultInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Period != other.Period) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Period != 0L) hash ^= Period.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Period != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Period);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Period != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Period);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRewardResultInput other) {
      if (other == null) {
        return;
      }
      if (other.Period != 0L) {
        Period = other.Period;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Period = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetRewardResultOutput : pb::IMessage<GetRewardResultOutput> {
    private static readonly pb::MessageParser<GetRewardResultOutput> _parser = new pb::MessageParser<GetRewardResultOutput>(() => new GetRewardResultOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRewardResultOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.LotteryContract.LotteryContractReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRewardResultOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRewardResultOutput(GetRewardResultOutput other) : this() {
      period_ = other.period_;
      randomHash_ = other.randomHash_ != null ? other.randomHash_.Clone() : null;
      rewardLotteries_ = other.rewardLotteries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRewardResultOutput Clone() {
      return new GetRewardResultOutput(this);
    }

    /// <summary>Field number for the "period" field.</summary>
    public const int PeriodFieldNumber = 1;
    private long period_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Period {
      get { return period_; }
      set {
        period_ = value;
      }
    }

    /// <summary>Field number for the "random_hash" field.</summary>
    public const int RandomHashFieldNumber = 2;
    private global::AElf.Types.Hash randomHash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash RandomHash {
      get { return randomHash_; }
      set {
        randomHash_ = value;
      }
    }

    /// <summary>Field number for the "reward_lotteries" field.</summary>
    public const int RewardLotteriesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::AElf.Contracts.LotteryContract.Lottery> _repeated_rewardLotteries_codec
        = pb::FieldCodec.ForMessage(26, global::AElf.Contracts.LotteryContract.Lottery.Parser);
    private readonly pbc::RepeatedField<global::AElf.Contracts.LotteryContract.Lottery> rewardLotteries_ = new pbc::RepeatedField<global::AElf.Contracts.LotteryContract.Lottery>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Contracts.LotteryContract.Lottery> RewardLotteries {
      get { return rewardLotteries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRewardResultOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRewardResultOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Period != other.Period) return false;
      if (!object.Equals(RandomHash, other.RandomHash)) return false;
      if(!rewardLotteries_.Equals(other.rewardLotteries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Period != 0L) hash ^= Period.GetHashCode();
      if (randomHash_ != null) hash ^= RandomHash.GetHashCode();
      hash ^= rewardLotteries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Period != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Period);
      }
      if (randomHash_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RandomHash);
      }
      rewardLotteries_.WriteTo(output, _repeated_rewardLotteries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Period != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Period);
      }
      if (randomHash_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RandomHash);
      }
      size += rewardLotteries_.CalculateSize(_repeated_rewardLotteries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRewardResultOutput other) {
      if (other == null) {
        return;
      }
      if (other.Period != 0L) {
        Period = other.Period;
      }
      if (other.randomHash_ != null) {
        if (randomHash_ == null) {
          RandomHash = new global::AElf.Types.Hash();
        }
        RandomHash.MergeFrom(other.RandomHash);
      }
      rewardLotteries_.Add(other.rewardLotteries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Period = input.ReadInt64();
            break;
          }
          case 18: {
            if (randomHash_ == null) {
              RandomHash = new global::AElf.Types.Hash();
            }
            input.ReadMessage(RandomHash);
            break;
          }
          case 26: {
            rewardLotteries_.AddEntriesFrom(input, _repeated_rewardLotteries_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetBoughtLotteriesInput : pb::IMessage<GetBoughtLotteriesInput> {
    private static readonly pb::MessageParser<GetBoughtLotteriesInput> _parser = new pb::MessageParser<GetBoughtLotteriesInput>(() => new GetBoughtLotteriesInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBoughtLotteriesInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.LotteryContract.LotteryContractReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBoughtLotteriesInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBoughtLotteriesInput(GetBoughtLotteriesInput other) : this() {
      period_ = other.period_;
      startId_ = other.startId_;
      owner_ = other.owner_ != null ? other.owner_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBoughtLotteriesInput Clone() {
      return new GetBoughtLotteriesInput(this);
    }

    /// <summary>Field number for the "period" field.</summary>
    public const int PeriodFieldNumber = 1;
    private long period_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Period {
      get { return period_; }
      set {
        period_ = value;
      }
    }

    /// <summary>Field number for the "start_id" field.</summary>
    public const int StartIdFieldNumber = 2;
    private int startId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartId {
      get { return startId_; }
      set {
        startId_ = value;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 3;
    private global::AElf.Types.Address owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBoughtLotteriesInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBoughtLotteriesInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Period != other.Period) return false;
      if (StartId != other.StartId) return false;
      if (!object.Equals(Owner, other.Owner)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Period != 0L) hash ^= Period.GetHashCode();
      if (StartId != 0) hash ^= StartId.GetHashCode();
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Period != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Period);
      }
      if (StartId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(StartId);
      }
      if (owner_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Period != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Period);
      }
      if (StartId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartId);
      }
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBoughtLotteriesInput other) {
      if (other == null) {
        return;
      }
      if (other.Period != 0L) {
        Period = other.Period;
      }
      if (other.StartId != 0) {
        StartId = other.StartId;
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          Owner = new global::AElf.Types.Address();
        }
        Owner.MergeFrom(other.Owner);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Period = input.ReadInt64();
            break;
          }
          case 16: {
            StartId = input.ReadInt32();
            break;
          }
          case 26: {
            if (owner_ == null) {
              Owner = new global::AElf.Types.Address();
            }
            input.ReadMessage(Owner);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetBoughtLotteriesOutput : pb::IMessage<GetBoughtLotteriesOutput> {
    private static readonly pb::MessageParser<GetBoughtLotteriesOutput> _parser = new pb::MessageParser<GetBoughtLotteriesOutput>(() => new GetBoughtLotteriesOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBoughtLotteriesOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.LotteryContract.LotteryContractReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBoughtLotteriesOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBoughtLotteriesOutput(GetBoughtLotteriesOutput other) : this() {
      lotteries_ = other.lotteries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBoughtLotteriesOutput Clone() {
      return new GetBoughtLotteriesOutput(this);
    }

    /// <summary>Field number for the "lotteries" field.</summary>
    public const int LotteriesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::AElf.Contracts.LotteryContract.Lottery> _repeated_lotteries_codec
        = pb::FieldCodec.ForMessage(26, global::AElf.Contracts.LotteryContract.Lottery.Parser);
    private readonly pbc::RepeatedField<global::AElf.Contracts.LotteryContract.Lottery> lotteries_ = new pbc::RepeatedField<global::AElf.Contracts.LotteryContract.Lottery>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Contracts.LotteryContract.Lottery> Lotteries {
      get { return lotteries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBoughtLotteriesOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBoughtLotteriesOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!lotteries_.Equals(other.lotteries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= lotteries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      lotteries_.WriteTo(output, _repeated_lotteries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += lotteries_.CalculateSize(_repeated_lotteries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBoughtLotteriesOutput other) {
      if (other == null) {
        return;
      }
      lotteries_.Add(other.lotteries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 26: {
            lotteries_.AddEntriesFrom(input, _repeated_lotteries_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RewardList : pb::IMessage<RewardList> {
    private static readonly pb::MessageParser<RewardList> _parser = new pb::MessageParser<RewardList>(() => new RewardList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RewardList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.LotteryContract.LotteryContractReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RewardList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RewardList(RewardList other) : this() {
      rewardMap_ = other.rewardMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RewardList Clone() {
      return new RewardList(this);
    }

    /// <summary>Field number for the "reward_map" field.</summary>
    public const int RewardMapFieldNumber = 1;
    private static readonly pbc::MapField<string, string>.Codec _map_rewardMap_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 10);
    private readonly pbc::MapField<string, string> rewardMap_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> RewardMap {
      get { return rewardMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RewardList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RewardList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!RewardMap.Equals(other.RewardMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= RewardMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rewardMap_.WriteTo(output, _map_rewardMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rewardMap_.CalculateSize(_map_rewardMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RewardList other) {
      if (other == null) {
        return;
      }
      rewardMap_.Add(other.rewardMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            rewardMap_.AddEntriesFrom(input, _map_rewardMap_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RewardsInfo : pb::IMessage<RewardsInfo> {
    private static readonly pb::MessageParser<RewardsInfo> _parser = new pb::MessageParser<RewardsInfo>(() => new RewardsInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RewardsInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.LotteryContract.LotteryContractReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RewardsInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RewardsInfo(RewardsInfo other) : this() {
      period_ = other.period_;
      rewards_ = other.rewards_.Clone();
      supposedDrawDate_ = other.supposedDrawDate_ != null ? other.supposedDrawDate_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RewardsInfo Clone() {
      return new RewardsInfo(this);
    }

    /// <summary>Field number for the "period" field.</summary>
    public const int PeriodFieldNumber = 1;
    private long period_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Period {
      get { return period_; }
      set {
        period_ = value;
      }
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 2;
    private static readonly pbc::MapField<string, int>.Codec _map_rewards_codec
        = new pbc::MapField<string, int>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForInt32(16, 0), 18);
    private readonly pbc::MapField<string, int> rewards_ = new pbc::MapField<string, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, int> Rewards {
      get { return rewards_; }
    }

    /// <summary>Field number for the "supposed_draw_date" field.</summary>
    public const int SupposedDrawDateFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp supposedDrawDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp SupposedDrawDate {
      get { return supposedDrawDate_; }
      set {
        supposedDrawDate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RewardsInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RewardsInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Period != other.Period) return false;
      if (!Rewards.Equals(other.Rewards)) return false;
      if (!object.Equals(SupposedDrawDate, other.SupposedDrawDate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Period != 0L) hash ^= Period.GetHashCode();
      hash ^= Rewards.GetHashCode();
      if (supposedDrawDate_ != null) hash ^= SupposedDrawDate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Period != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Period);
      }
      rewards_.WriteTo(output, _map_rewards_codec);
      if (supposedDrawDate_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SupposedDrawDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Period != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Period);
      }
      size += rewards_.CalculateSize(_map_rewards_codec);
      if (supposedDrawDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SupposedDrawDate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RewardsInfo other) {
      if (other == null) {
        return;
      }
      if (other.Period != 0L) {
        Period = other.Period;
      }
      rewards_.Add(other.rewards_);
      if (other.supposedDrawDate_ != null) {
        if (supposedDrawDate_ == null) {
          SupposedDrawDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        SupposedDrawDate.MergeFrom(other.SupposedDrawDate);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Period = input.ReadInt64();
            break;
          }
          case 18: {
            rewards_.AddEntriesFrom(input, _map_rewards_codec);
            break;
          }
          case 26: {
            if (supposedDrawDate_ == null) {
              SupposedDrawDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(SupposedDrawDate);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StringList : pb::IMessage<StringList> {
    private static readonly pb::MessageParser<StringList> _parser = new pb::MessageParser<StringList>(() => new StringList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StringList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.LotteryContract.LotteryContractReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringList(StringList other) : this() {
      value_ = other.value_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringList Clone() {
      return new StringList(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_value_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> value_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Value {
      get { return value_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StringList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StringList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!value_.Equals(other.value_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= value_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      value_.WriteTo(output, _repeated_value_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_repeated_value_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StringList other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            value_.AddEntriesFrom(input, _repeated_value_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
