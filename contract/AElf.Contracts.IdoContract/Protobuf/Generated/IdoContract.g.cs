// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ido_contract.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Gandalf.Contracts.IdoContract {

  /// <summary>Holder for reflection information generated from ido_contract.proto</summary>
  public static partial class IdoContractReflection {

    #region Descriptor
    /// <summary>File descriptor for ido_contract.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static IdoContractReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJpZG9fY29udHJhY3QucHJvdG8aD2FlbGYvY29yZS5wcm90bxoSYWVsZi9v",
            "cHRpb25zLnByb3RvGhtnb29nbGUvcHJvdG9idWYvZW1wdHkucHJvdG8aHmdv",
            "b2dsZS9wcm90b2J1Zi93cmFwcGVycy5wcm90bxofZ29vZ2xlL3Byb3RvYnVm",
            "L3RpbWVzdGFtcC5wcm90byKhAwoOUHVibGljT2ZmZXJpbmcSHQoVb2ZmZXJp",
            "bmdfdG9rZW5fc3ltYm9sGAEgASgJEjAKFW9mZmVyaW5nX3Rva2VuX2Ftb3Vu",
            "dBgCIAEoCzIRLmFlbGYuQmlnSW50VmFsdWUSGQoRd2FudF90b2tlbl9zeW1i",
            "b2wYAyABKAkSLAoRd2FudF90b2tlbl9hbW91bnQYBCABKAsyES5hZWxmLkJp",
            "Z0ludFZhbHVlEi4KCnN0YXJ0X3RpbWUYBSABKAsyGi5nb29nbGUucHJvdG9i",
            "dWYuVGltZXN0YW1wEiwKCGVuZF90aW1lGAYgASgLMhouZ29vZ2xlLnByb3Rv",
            "YnVmLlRpbWVzdGFtcBIgCglwdWJsaXNoZXIYByABKAsyDS5hZWxmLkFkZHJl",
            "c3MSDwoHY2xhaW1lZBgIIAEoCBItChJ3YW50X3Rva2VuX2JhbGFuY2UYCSAB",
            "KAsyES5hZWxmLkJpZ0ludFZhbHVlEjUKGnN1YnNjcmliZWRfb2ZmZXJpbmdf",
            "YW1vdW50GAogASgLMhEuYWVsZi5CaWdJbnRWYWx1ZSJFCghVc2VySW5mbxIP",
            "CgdjbGFpbWVkGAEgASgIEigKDW9idGFpbl9hbW91bnQYAiABKAsyES5hZWxm",
            "LkJpZ0ludFZhbHVlIjEKD1B1YmxpY09mZmVyTGlzdBIeCgV2YWx1ZRgBIAMo",
            "CzIPLlB1YmxpY09mZmVyaW5nIpACChZBZGRQdWJsaWNPZmZlcmluZ0lucHV0",
            "Eh0KFW9mZmVyaW5nX3Rva2VuX3N5bWJvbBgBIAEoCRIwChVvZmZlcmluZ190",
            "b2tlbl9hbW91bnQYAiABKAsyES5hZWxmLkJpZ0ludFZhbHVlEhkKEXdhbnRf",
            "dG9rZW5fc3ltYm9sGAMgASgJEiwKEXdhbnRfdG9rZW5fYW1vdW50GAQgASgL",
            "MhEuYWVsZi5CaWdJbnRWYWx1ZRIuCgpzdGFydF90aW1lGAUgASgLMhouZ29v",
            "Z2xlLnByb3RvYnVmLlRpbWVzdGFtcBIsCghlbmRfdGltZRgGIAEoCzIaLmdv",
            "b2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAiTgoVQ2hhbmdlQXNjcmlwdGlvbklu",
            "cHV0EhQKDHRva2VuX3N5bWJvbBgBIAEoCRIfCghyZWNlaXZlchgCIAEoCzIN",
            "LmFlbGYuQWRkcmVzcyJDCgtJbnZlc3RJbnB1dBIRCglwdWJsaWNfaWQYASAB",
            "KAUSIQoGYW1vdW50GAIgASgLMhEuYWVsZi5CaWdJbnRWYWx1ZSI/Cg1Vc2Vy",
            "SW5mb0lucHV0EhEKCXB1YmxpY19pZBgBIAEoBRIbCgR1c2VyGAIgASgLMg0u",
            "YWVsZi5BZGRyZXNzIkAKElJlc2V0VGltZVNwYW5JbnB1dBIUCgxtYXhfdGlt",
            "ZXNwYW4YASABKAMSFAoMbWluX3RpbWVzcGFuGAIgASgDIkEKE1Jlc2V0VGlt",
            "ZVNwYW5PdXRwdXQSFAoMbWF4X3RpbWVzcGFuGAEgASgDEhQKDG1pbl90aW1l",
            "c3BhbhgCIAEoAyK6AwoUUHVibGljT2ZmZXJpbmdPdXRwdXQSHQoVb2ZmZXJp",
            "bmdfdG9rZW5fc3ltYm9sGAEgASgJEjAKFW9mZmVyaW5nX3Rva2VuX2Ftb3Vu",
            "dBgCIAEoCzIRLmFlbGYuQmlnSW50VmFsdWUSGQoRd2FudF90b2tlbl9zeW1i",
            "b2wYAyABKAkSLAoRd2FudF90b2tlbl9hbW91bnQYBCABKAsyES5hZWxmLkJp",
            "Z0ludFZhbHVlEi4KCnN0YXJ0X3RpbWUYBSABKAsyGi5nb29nbGUucHJvdG9i",
            "dWYuVGltZXN0YW1wEiwKCGVuZF90aW1lGAYgASgLMhouZ29vZ2xlLnByb3Rv",
            "YnVmLlRpbWVzdGFtcBIRCglwdWJsaWNfaWQYByABKAMSIAoJcHVibGlzaGVy",
            "GAggASgLMg0uYWVsZi5BZGRyZXNzEg8KB2NsYWltZWQYCSABKAgSLQoSV2Fu",
            "dF9Ub2tlbl9CYWxhbmNlGAogASgLMhEuYWVsZi5CaWdJbnRWYWx1ZRI1ChpT",
            "dWJzY3JpYmVkX09mZmVyaW5nX0Ftb3VudBgLIAEoCzIRLmFlbGYuQmlnSW50",
            "VmFsdWUixgIKEUFkZFB1YmxpY09mZmVyaW5nEh0KFW9mZmVyaW5nX3Rva2Vu",
            "X3N5bWJvbBgBIAEoCRIwChVvZmZlcmluZ190b2tlbl9hbW91bnQYAiABKAsy",
            "ES5hZWxmLkJpZ0ludFZhbHVlEhkKEXdhbnRfdG9rZW5fc3ltYm9sGAMgASgJ",
            "EiwKEXdhbnRfdG9rZW5fYW1vdW50GAQgASgLMhEuYWVsZi5CaWdJbnRWYWx1",
            "ZRIgCglwdWJsaXNoZXIYBSABKAsyDS5hZWxmLkFkZHJlc3MSLgoKc3RhcnRf",
            "dGltZRgGIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLAoIZW5k",
            "X3RpbWUYByABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEhEKCXB1",
            "YmxpY19pZBgIIAEoAzoEoLsYASJ6ChBDaGFuZ2VBc2NyaXB0aW9uEhQKDHRv",
            "a2VuX3N5bWJvbBgBIAEoCRIkCg1vbGRfcHVibGlzaGVyGAIgASgLMg0uYWVs",
            "Zi5BZGRyZXNzEiQKDW5ld19wdWJsaXNoZXIYAyABKAsyDS5hZWxmLkFkZHJl",
            "c3M6BKC7GAEiawoIV2l0aGRyYXcSEgoKcHViaWxpY19pZBgBIAEoAxIZCgJ0",
            "bxgCIAEoCzINLmFlbGYuQWRkcmVzcxISCgp3YW50X3Rva2VuGAMgASgDEhYK",
            "Dm9mZmVyaW5nX3Rva2VuGAQgASgDOgSguxgBIp0BCgZJbnZlc3QSEQoJcHVi",
            "bGljX2lkGAEgASgDEh8KCGludmVzdG9yGAIgASgLMg0uYWVsZi5BZGRyZXNz",
            "EhQKDHRva2VuX3N5bWJvbBgDIAEoCRIhCgZpbmNvbWUYBCABKAsyES5hZWxm",
            "LkJpZ0ludFZhbHVlEiAKBXNwZW5kGAUgASgLMhEuYWVsZi5CaWdJbnRWYWx1",
            "ZToEoLsYASJgCgdIYXJ2ZXN0EhEKCXB1YmxpY19pZBgBIAEoAxIZCgJ0bxgC",
            "IAEoCzINLmFlbGYuQWRkcmVzcxIhCgZhbW91bnQYAyABKAsyES5hZWxmLkJp",
            "Z0ludFZhbHVlOgSguxgBMoIGCgtJZG9Db250cmFjdBI1CgpJbml0aWFsaXpl",
            "Eg0uYWVsZi5BZGRyZXNzGhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASSwoR",
            "QWRkUHVibGljT2ZmZXJpbmcSFy5BZGRQdWJsaWNPZmZlcmluZ0lucHV0Ghsu",
            "Z29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWUiABJEChBDaGFuZ2VBc2NyaXB0",
            "aW9uEhYuQ2hhbmdlQXNjcmlwdGlvbklucHV0GhYuZ29vZ2xlLnByb3RvYnVm",
            "LkVtcHR5IgASQQoIV2l0aGRyYXcSGy5nb29nbGUucHJvdG9idWYuSW50MzJW",
            "YWx1ZRoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAEjAKBkludmVzdBIMLklu",
            "dmVzdElucHV0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASQAoHSGFydmVz",
            "dBIbLmdvb2dsZS5wcm90b2J1Zi5JbnQzMlZhbHVlGhYuZ29vZ2xlLnByb3Rv",
            "YnVmLkVtcHR5IgASPgoNUmVzZXRUaW1lU3BhbhITLlJlc2V0VGltZVNwYW5J",
            "bnB1dBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAEjgKCEdldE93bmVyEhYu",
            "Z29vZ2xlLnByb3RvYnVmLkVtcHR5Gg0uYWVsZi5BZGRyZXNzIgWIifcBARJC",
            "CgtHZXRUaW1lc3BhbhIWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eRoULlJlc2V0",
            "VGltZVNwYW5PdXRwdXQiBYiJ9wEBEk4KEUdldFB1YmxpY09mZmVyaW5nEhsu",
            "Z29vZ2xlLnByb3RvYnVmLkludDMyVmFsdWUaFS5QdWJsaWNPZmZlcmluZ091",
            "dHB1dCIFiIn3AQESLwoLR2V0VXNlckluZm8SDi5Vc2VySW5mb0lucHV0Ggku",
            "VXNlckluZm8iBYiJ9wEBGjOyzPYBLkdhbmRhbGYuQ29udHJhY3RzLklkb0Nv",
            "bnRyYWN0Lklkb0NvbnRyYWN0U3RhdGVCIKoCHUdhbmRhbGYuQ29udHJhY3Rz",
            "Lklkb0NvbnRyYWN0YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::AElf.Types.CoreReflection.Descriptor, global::AElf.OptionsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.IdoContract.PublicOffering), global::Gandalf.Contracts.IdoContract.PublicOffering.Parser, new[]{ "OfferingTokenSymbol", "OfferingTokenAmount", "WantTokenSymbol", "WantTokenAmount", "StartTime", "EndTime", "Publisher", "Claimed", "WantTokenBalance", "SubscribedOfferingAmount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.IdoContract.UserInfo), global::Gandalf.Contracts.IdoContract.UserInfo.Parser, new[]{ "Claimed", "ObtainAmount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.IdoContract.PublicOfferList), global::Gandalf.Contracts.IdoContract.PublicOfferList.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.IdoContract.AddPublicOfferingInput), global::Gandalf.Contracts.IdoContract.AddPublicOfferingInput.Parser, new[]{ "OfferingTokenSymbol", "OfferingTokenAmount", "WantTokenSymbol", "WantTokenAmount", "StartTime", "EndTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.IdoContract.ChangeAscriptionInput), global::Gandalf.Contracts.IdoContract.ChangeAscriptionInput.Parser, new[]{ "TokenSymbol", "Receiver" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.IdoContract.InvestInput), global::Gandalf.Contracts.IdoContract.InvestInput.Parser, new[]{ "PublicId", "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.IdoContract.UserInfoInput), global::Gandalf.Contracts.IdoContract.UserInfoInput.Parser, new[]{ "PublicId", "User" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.IdoContract.ResetTimeSpanInput), global::Gandalf.Contracts.IdoContract.ResetTimeSpanInput.Parser, new[]{ "MaxTimespan", "MinTimespan" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.IdoContract.ResetTimeSpanOutput), global::Gandalf.Contracts.IdoContract.ResetTimeSpanOutput.Parser, new[]{ "MaxTimespan", "MinTimespan" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.IdoContract.PublicOfferingOutput), global::Gandalf.Contracts.IdoContract.PublicOfferingOutput.Parser, new[]{ "OfferingTokenSymbol", "OfferingTokenAmount", "WantTokenSymbol", "WantTokenAmount", "StartTime", "EndTime", "PublicId", "Publisher", "Claimed", "WantTokenBalance", "SubscribedOfferingAmount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.IdoContract.AddPublicOffering), global::Gandalf.Contracts.IdoContract.AddPublicOffering.Parser, new[]{ "OfferingTokenSymbol", "OfferingTokenAmount", "WantTokenSymbol", "WantTokenAmount", "Publisher", "StartTime", "EndTime", "PublicId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.IdoContract.ChangeAscription), global::Gandalf.Contracts.IdoContract.ChangeAscription.Parser, new[]{ "TokenSymbol", "OldPublisher", "NewPublisher" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.IdoContract.Withdraw), global::Gandalf.Contracts.IdoContract.Withdraw.Parser, new[]{ "PubilicId", "To", "WantToken", "OfferingToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.IdoContract.Invest), global::Gandalf.Contracts.IdoContract.Invest.Parser, new[]{ "PublicId", "Investor", "TokenSymbol", "Income", "Spend" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.IdoContract.Harvest), global::Gandalf.Contracts.IdoContract.Harvest.Parser, new[]{ "PublicId", "To", "Amount" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// stuct
  /// </summary>
  public sealed partial class PublicOffering : pb::IMessage<PublicOffering> {
    private static readonly pb::MessageParser<PublicOffering> _parser = new pb::MessageParser<PublicOffering>(() => new PublicOffering());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PublicOffering> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.IdoContract.IdoContractReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublicOffering() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublicOffering(PublicOffering other) : this() {
      offeringTokenSymbol_ = other.offeringTokenSymbol_;
      offeringTokenAmount_ = other.offeringTokenAmount_ != null ? other.offeringTokenAmount_.Clone() : null;
      wantTokenSymbol_ = other.wantTokenSymbol_;
      wantTokenAmount_ = other.wantTokenAmount_ != null ? other.wantTokenAmount_.Clone() : null;
      startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
      endTime_ = other.endTime_ != null ? other.endTime_.Clone() : null;
      publisher_ = other.publisher_ != null ? other.publisher_.Clone() : null;
      claimed_ = other.claimed_;
      wantTokenBalance_ = other.wantTokenBalance_ != null ? other.wantTokenBalance_.Clone() : null;
      subscribedOfferingAmount_ = other.subscribedOfferingAmount_ != null ? other.subscribedOfferingAmount_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublicOffering Clone() {
      return new PublicOffering(this);
    }

    /// <summary>Field number for the "offering_token_symbol" field.</summary>
    public const int OfferingTokenSymbolFieldNumber = 1;
    private string offeringTokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OfferingTokenSymbol {
      get { return offeringTokenSymbol_; }
      set {
        offeringTokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "offering_token_amount" field.</summary>
    public const int OfferingTokenAmountFieldNumber = 2;
    private global::AElf.Types.BigIntValue offeringTokenAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue OfferingTokenAmount {
      get { return offeringTokenAmount_; }
      set {
        offeringTokenAmount_ = value;
      }
    }

    /// <summary>Field number for the "want_token_symbol" field.</summary>
    public const int WantTokenSymbolFieldNumber = 3;
    private string wantTokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WantTokenSymbol {
      get { return wantTokenSymbol_; }
      set {
        wantTokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "want_token_amount" field.</summary>
    public const int WantTokenAmountFieldNumber = 4;
    private global::AElf.Types.BigIntValue wantTokenAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue WantTokenAmount {
      get { return wantTokenAmount_; }
      set {
        wantTokenAmount_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "publisher" field.</summary>
    public const int PublisherFieldNumber = 7;
    private global::AElf.Types.Address publisher_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Publisher {
      get { return publisher_; }
      set {
        publisher_ = value;
      }
    }

    /// <summary>Field number for the "claimed" field.</summary>
    public const int ClaimedFieldNumber = 8;
    private bool claimed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Claimed {
      get { return claimed_; }
      set {
        claimed_ = value;
      }
    }

    /// <summary>Field number for the "want_token_balance" field.</summary>
    public const int WantTokenBalanceFieldNumber = 9;
    private global::AElf.Types.BigIntValue wantTokenBalance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue WantTokenBalance {
      get { return wantTokenBalance_; }
      set {
        wantTokenBalance_ = value;
      }
    }

    /// <summary>Field number for the "subscribed_offering_amount" field.</summary>
    public const int SubscribedOfferingAmountFieldNumber = 10;
    private global::AElf.Types.BigIntValue subscribedOfferingAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue SubscribedOfferingAmount {
      get { return subscribedOfferingAmount_; }
      set {
        subscribedOfferingAmount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PublicOffering);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PublicOffering other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OfferingTokenSymbol != other.OfferingTokenSymbol) return false;
      if (!object.Equals(OfferingTokenAmount, other.OfferingTokenAmount)) return false;
      if (WantTokenSymbol != other.WantTokenSymbol) return false;
      if (!object.Equals(WantTokenAmount, other.WantTokenAmount)) return false;
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(EndTime, other.EndTime)) return false;
      if (!object.Equals(Publisher, other.Publisher)) return false;
      if (Claimed != other.Claimed) return false;
      if (!object.Equals(WantTokenBalance, other.WantTokenBalance)) return false;
      if (!object.Equals(SubscribedOfferingAmount, other.SubscribedOfferingAmount)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OfferingTokenSymbol.Length != 0) hash ^= OfferingTokenSymbol.GetHashCode();
      if (offeringTokenAmount_ != null) hash ^= OfferingTokenAmount.GetHashCode();
      if (WantTokenSymbol.Length != 0) hash ^= WantTokenSymbol.GetHashCode();
      if (wantTokenAmount_ != null) hash ^= WantTokenAmount.GetHashCode();
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (endTime_ != null) hash ^= EndTime.GetHashCode();
      if (publisher_ != null) hash ^= Publisher.GetHashCode();
      if (Claimed != false) hash ^= Claimed.GetHashCode();
      if (wantTokenBalance_ != null) hash ^= WantTokenBalance.GetHashCode();
      if (subscribedOfferingAmount_ != null) hash ^= SubscribedOfferingAmount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OfferingTokenSymbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(OfferingTokenSymbol);
      }
      if (offeringTokenAmount_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OfferingTokenAmount);
      }
      if (WantTokenSymbol.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(WantTokenSymbol);
      }
      if (wantTokenAmount_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(WantTokenAmount);
      }
      if (startTime_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(EndTime);
      }
      if (publisher_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Publisher);
      }
      if (Claimed != false) {
        output.WriteRawTag(64);
        output.WriteBool(Claimed);
      }
      if (wantTokenBalance_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(WantTokenBalance);
      }
      if (subscribedOfferingAmount_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(SubscribedOfferingAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OfferingTokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OfferingTokenSymbol);
      }
      if (offeringTokenAmount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OfferingTokenAmount);
      }
      if (WantTokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WantTokenSymbol);
      }
      if (wantTokenAmount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WantTokenAmount);
      }
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (endTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTime);
      }
      if (publisher_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Publisher);
      }
      if (Claimed != false) {
        size += 1 + 1;
      }
      if (wantTokenBalance_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WantTokenBalance);
      }
      if (subscribedOfferingAmount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SubscribedOfferingAmount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PublicOffering other) {
      if (other == null) {
        return;
      }
      if (other.OfferingTokenSymbol.Length != 0) {
        OfferingTokenSymbol = other.OfferingTokenSymbol;
      }
      if (other.offeringTokenAmount_ != null) {
        if (offeringTokenAmount_ == null) {
          OfferingTokenAmount = new global::AElf.Types.BigIntValue();
        }
        OfferingTokenAmount.MergeFrom(other.OfferingTokenAmount);
      }
      if (other.WantTokenSymbol.Length != 0) {
        WantTokenSymbol = other.WantTokenSymbol;
      }
      if (other.wantTokenAmount_ != null) {
        if (wantTokenAmount_ == null) {
          WantTokenAmount = new global::AElf.Types.BigIntValue();
        }
        WantTokenAmount.MergeFrom(other.WantTokenAmount);
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.endTime_ != null) {
        if (endTime_ == null) {
          EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EndTime.MergeFrom(other.EndTime);
      }
      if (other.publisher_ != null) {
        if (publisher_ == null) {
          Publisher = new global::AElf.Types.Address();
        }
        Publisher.MergeFrom(other.Publisher);
      }
      if (other.Claimed != false) {
        Claimed = other.Claimed;
      }
      if (other.wantTokenBalance_ != null) {
        if (wantTokenBalance_ == null) {
          WantTokenBalance = new global::AElf.Types.BigIntValue();
        }
        WantTokenBalance.MergeFrom(other.WantTokenBalance);
      }
      if (other.subscribedOfferingAmount_ != null) {
        if (subscribedOfferingAmount_ == null) {
          SubscribedOfferingAmount = new global::AElf.Types.BigIntValue();
        }
        SubscribedOfferingAmount.MergeFrom(other.SubscribedOfferingAmount);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            OfferingTokenSymbol = input.ReadString();
            break;
          }
          case 18: {
            if (offeringTokenAmount_ == null) {
              OfferingTokenAmount = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(OfferingTokenAmount);
            break;
          }
          case 26: {
            WantTokenSymbol = input.ReadString();
            break;
          }
          case 34: {
            if (wantTokenAmount_ == null) {
              WantTokenAmount = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(WantTokenAmount);
            break;
          }
          case 42: {
            if (startTime_ == null) {
              StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 50: {
            if (endTime_ == null) {
              EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EndTime);
            break;
          }
          case 58: {
            if (publisher_ == null) {
              Publisher = new global::AElf.Types.Address();
            }
            input.ReadMessage(Publisher);
            break;
          }
          case 64: {
            Claimed = input.ReadBool();
            break;
          }
          case 74: {
            if (wantTokenBalance_ == null) {
              WantTokenBalance = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(WantTokenBalance);
            break;
          }
          case 82: {
            if (subscribedOfferingAmount_ == null) {
              SubscribedOfferingAmount = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(SubscribedOfferingAmount);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserInfo : pb::IMessage<UserInfo> {
    private static readonly pb::MessageParser<UserInfo> _parser = new pb::MessageParser<UserInfo>(() => new UserInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.IdoContract.IdoContractReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo(UserInfo other) : this() {
      claimed_ = other.claimed_;
      obtainAmount_ = other.obtainAmount_ != null ? other.obtainAmount_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo Clone() {
      return new UserInfo(this);
    }

    /// <summary>Field number for the "claimed" field.</summary>
    public const int ClaimedFieldNumber = 1;
    private bool claimed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Claimed {
      get { return claimed_; }
      set {
        claimed_ = value;
      }
    }

    /// <summary>Field number for the "obtain_amount" field.</summary>
    public const int ObtainAmountFieldNumber = 2;
    private global::AElf.Types.BigIntValue obtainAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue ObtainAmount {
      get { return obtainAmount_; }
      set {
        obtainAmount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Claimed != other.Claimed) return false;
      if (!object.Equals(ObtainAmount, other.ObtainAmount)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Claimed != false) hash ^= Claimed.GetHashCode();
      if (obtainAmount_ != null) hash ^= ObtainAmount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Claimed != false) {
        output.WriteRawTag(8);
        output.WriteBool(Claimed);
      }
      if (obtainAmount_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ObtainAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Claimed != false) {
        size += 1 + 1;
      }
      if (obtainAmount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ObtainAmount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserInfo other) {
      if (other == null) {
        return;
      }
      if (other.Claimed != false) {
        Claimed = other.Claimed;
      }
      if (other.obtainAmount_ != null) {
        if (obtainAmount_ == null) {
          ObtainAmount = new global::AElf.Types.BigIntValue();
        }
        ObtainAmount.MergeFrom(other.ObtainAmount);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Claimed = input.ReadBool();
            break;
          }
          case 18: {
            if (obtainAmount_ == null) {
              ObtainAmount = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(ObtainAmount);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PublicOfferList : pb::IMessage<PublicOfferList> {
    private static readonly pb::MessageParser<PublicOfferList> _parser = new pb::MessageParser<PublicOfferList>(() => new PublicOfferList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PublicOfferList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.IdoContract.IdoContractReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublicOfferList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublicOfferList(PublicOfferList other) : this() {
      value_ = other.value_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublicOfferList Clone() {
      return new PublicOfferList(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Gandalf.Contracts.IdoContract.PublicOffering> _repeated_value_codec
        = pb::FieldCodec.ForMessage(10, global::Gandalf.Contracts.IdoContract.PublicOffering.Parser);
    private readonly pbc::RepeatedField<global::Gandalf.Contracts.IdoContract.PublicOffering> value_ = new pbc::RepeatedField<global::Gandalf.Contracts.IdoContract.PublicOffering>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Gandalf.Contracts.IdoContract.PublicOffering> Value {
      get { return value_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PublicOfferList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PublicOfferList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!value_.Equals(other.value_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= value_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      value_.WriteTo(output, _repeated_value_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_repeated_value_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PublicOfferList other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            value_.AddEntriesFrom(input, _repeated_value_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddPublicOfferingInput : pb::IMessage<AddPublicOfferingInput> {
    private static readonly pb::MessageParser<AddPublicOfferingInput> _parser = new pb::MessageParser<AddPublicOfferingInput>(() => new AddPublicOfferingInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddPublicOfferingInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.IdoContract.IdoContractReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddPublicOfferingInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddPublicOfferingInput(AddPublicOfferingInput other) : this() {
      offeringTokenSymbol_ = other.offeringTokenSymbol_;
      offeringTokenAmount_ = other.offeringTokenAmount_ != null ? other.offeringTokenAmount_.Clone() : null;
      wantTokenSymbol_ = other.wantTokenSymbol_;
      wantTokenAmount_ = other.wantTokenAmount_ != null ? other.wantTokenAmount_.Clone() : null;
      startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
      endTime_ = other.endTime_ != null ? other.endTime_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddPublicOfferingInput Clone() {
      return new AddPublicOfferingInput(this);
    }

    /// <summary>Field number for the "offering_token_symbol" field.</summary>
    public const int OfferingTokenSymbolFieldNumber = 1;
    private string offeringTokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OfferingTokenSymbol {
      get { return offeringTokenSymbol_; }
      set {
        offeringTokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "offering_token_amount" field.</summary>
    public const int OfferingTokenAmountFieldNumber = 2;
    private global::AElf.Types.BigIntValue offeringTokenAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue OfferingTokenAmount {
      get { return offeringTokenAmount_; }
      set {
        offeringTokenAmount_ = value;
      }
    }

    /// <summary>Field number for the "want_token_symbol" field.</summary>
    public const int WantTokenSymbolFieldNumber = 3;
    private string wantTokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WantTokenSymbol {
      get { return wantTokenSymbol_; }
      set {
        wantTokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "want_token_amount" field.</summary>
    public const int WantTokenAmountFieldNumber = 4;
    private global::AElf.Types.BigIntValue wantTokenAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue WantTokenAmount {
      get { return wantTokenAmount_; }
      set {
        wantTokenAmount_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddPublicOfferingInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddPublicOfferingInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OfferingTokenSymbol != other.OfferingTokenSymbol) return false;
      if (!object.Equals(OfferingTokenAmount, other.OfferingTokenAmount)) return false;
      if (WantTokenSymbol != other.WantTokenSymbol) return false;
      if (!object.Equals(WantTokenAmount, other.WantTokenAmount)) return false;
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(EndTime, other.EndTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OfferingTokenSymbol.Length != 0) hash ^= OfferingTokenSymbol.GetHashCode();
      if (offeringTokenAmount_ != null) hash ^= OfferingTokenAmount.GetHashCode();
      if (WantTokenSymbol.Length != 0) hash ^= WantTokenSymbol.GetHashCode();
      if (wantTokenAmount_ != null) hash ^= WantTokenAmount.GetHashCode();
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (endTime_ != null) hash ^= EndTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OfferingTokenSymbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(OfferingTokenSymbol);
      }
      if (offeringTokenAmount_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OfferingTokenAmount);
      }
      if (WantTokenSymbol.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(WantTokenSymbol);
      }
      if (wantTokenAmount_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(WantTokenAmount);
      }
      if (startTime_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(EndTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OfferingTokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OfferingTokenSymbol);
      }
      if (offeringTokenAmount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OfferingTokenAmount);
      }
      if (WantTokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WantTokenSymbol);
      }
      if (wantTokenAmount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WantTokenAmount);
      }
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (endTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddPublicOfferingInput other) {
      if (other == null) {
        return;
      }
      if (other.OfferingTokenSymbol.Length != 0) {
        OfferingTokenSymbol = other.OfferingTokenSymbol;
      }
      if (other.offeringTokenAmount_ != null) {
        if (offeringTokenAmount_ == null) {
          OfferingTokenAmount = new global::AElf.Types.BigIntValue();
        }
        OfferingTokenAmount.MergeFrom(other.OfferingTokenAmount);
      }
      if (other.WantTokenSymbol.Length != 0) {
        WantTokenSymbol = other.WantTokenSymbol;
      }
      if (other.wantTokenAmount_ != null) {
        if (wantTokenAmount_ == null) {
          WantTokenAmount = new global::AElf.Types.BigIntValue();
        }
        WantTokenAmount.MergeFrom(other.WantTokenAmount);
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.endTime_ != null) {
        if (endTime_ == null) {
          EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EndTime.MergeFrom(other.EndTime);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            OfferingTokenSymbol = input.ReadString();
            break;
          }
          case 18: {
            if (offeringTokenAmount_ == null) {
              OfferingTokenAmount = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(OfferingTokenAmount);
            break;
          }
          case 26: {
            WantTokenSymbol = input.ReadString();
            break;
          }
          case 34: {
            if (wantTokenAmount_ == null) {
              WantTokenAmount = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(WantTokenAmount);
            break;
          }
          case 42: {
            if (startTime_ == null) {
              StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 50: {
            if (endTime_ == null) {
              EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EndTime);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChangeAscriptionInput : pb::IMessage<ChangeAscriptionInput> {
    private static readonly pb::MessageParser<ChangeAscriptionInput> _parser = new pb::MessageParser<ChangeAscriptionInput>(() => new ChangeAscriptionInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeAscriptionInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.IdoContract.IdoContractReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeAscriptionInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeAscriptionInput(ChangeAscriptionInput other) : this() {
      tokenSymbol_ = other.tokenSymbol_;
      receiver_ = other.receiver_ != null ? other.receiver_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeAscriptionInput Clone() {
      return new ChangeAscriptionInput(this);
    }

    /// <summary>Field number for the "token_symbol" field.</summary>
    public const int TokenSymbolFieldNumber = 1;
    private string tokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenSymbol {
      get { return tokenSymbol_; }
      set {
        tokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "receiver" field.</summary>
    public const int ReceiverFieldNumber = 2;
    private global::AElf.Types.Address receiver_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Receiver {
      get { return receiver_; }
      set {
        receiver_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeAscriptionInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeAscriptionInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TokenSymbol != other.TokenSymbol) return false;
      if (!object.Equals(Receiver, other.Receiver)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TokenSymbol.Length != 0) hash ^= TokenSymbol.GetHashCode();
      if (receiver_ != null) hash ^= Receiver.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TokenSymbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TokenSymbol);
      }
      if (receiver_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Receiver);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenSymbol);
      }
      if (receiver_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Receiver);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeAscriptionInput other) {
      if (other == null) {
        return;
      }
      if (other.TokenSymbol.Length != 0) {
        TokenSymbol = other.TokenSymbol;
      }
      if (other.receiver_ != null) {
        if (receiver_ == null) {
          Receiver = new global::AElf.Types.Address();
        }
        Receiver.MergeFrom(other.Receiver);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TokenSymbol = input.ReadString();
            break;
          }
          case 18: {
            if (receiver_ == null) {
              Receiver = new global::AElf.Types.Address();
            }
            input.ReadMessage(Receiver);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InvestInput : pb::IMessage<InvestInput> {
    private static readonly pb::MessageParser<InvestInput> _parser = new pb::MessageParser<InvestInput>(() => new InvestInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InvestInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.IdoContract.IdoContractReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvestInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvestInput(InvestInput other) : this() {
      publicId_ = other.publicId_;
      amount_ = other.amount_ != null ? other.amount_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvestInput Clone() {
      return new InvestInput(this);
    }

    /// <summary>Field number for the "public_id" field.</summary>
    public const int PublicIdFieldNumber = 1;
    private int publicId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PublicId {
      get { return publicId_; }
      set {
        publicId_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private global::AElf.Types.BigIntValue amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InvestInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InvestInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PublicId != other.PublicId) return false;
      if (!object.Equals(Amount, other.Amount)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PublicId != 0) hash ^= PublicId.GetHashCode();
      if (amount_ != null) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PublicId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PublicId);
      }
      if (amount_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PublicId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PublicId);
      }
      if (amount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InvestInput other) {
      if (other == null) {
        return;
      }
      if (other.PublicId != 0) {
        PublicId = other.PublicId;
      }
      if (other.amount_ != null) {
        if (amount_ == null) {
          Amount = new global::AElf.Types.BigIntValue();
        }
        Amount.MergeFrom(other.Amount);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PublicId = input.ReadInt32();
            break;
          }
          case 18: {
            if (amount_ == null) {
              Amount = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(Amount);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserInfoInput : pb::IMessage<UserInfoInput> {
    private static readonly pb::MessageParser<UserInfoInput> _parser = new pb::MessageParser<UserInfoInput>(() => new UserInfoInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserInfoInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.IdoContract.IdoContractReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfoInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfoInput(UserInfoInput other) : this() {
      publicId_ = other.publicId_;
      user_ = other.user_ != null ? other.user_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfoInput Clone() {
      return new UserInfoInput(this);
    }

    /// <summary>Field number for the "public_id" field.</summary>
    public const int PublicIdFieldNumber = 1;
    private int publicId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PublicId {
      get { return publicId_; }
      set {
        publicId_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    private global::AElf.Types.Address user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserInfoInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserInfoInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PublicId != other.PublicId) return false;
      if (!object.Equals(User, other.User)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PublicId != 0) hash ^= PublicId.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PublicId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PublicId);
      }
      if (user_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PublicId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PublicId);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserInfoInput other) {
      if (other == null) {
        return;
      }
      if (other.PublicId != 0) {
        PublicId = other.PublicId;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::AElf.Types.Address();
        }
        User.MergeFrom(other.User);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PublicId = input.ReadInt32();
            break;
          }
          case 18: {
            if (user_ == null) {
              User = new global::AElf.Types.Address();
            }
            input.ReadMessage(User);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///seconds
  /// </summary>
  public sealed partial class ResetTimeSpanInput : pb::IMessage<ResetTimeSpanInput> {
    private static readonly pb::MessageParser<ResetTimeSpanInput> _parser = new pb::MessageParser<ResetTimeSpanInput>(() => new ResetTimeSpanInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResetTimeSpanInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.IdoContract.IdoContractReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetTimeSpanInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetTimeSpanInput(ResetTimeSpanInput other) : this() {
      maxTimespan_ = other.maxTimespan_;
      minTimespan_ = other.minTimespan_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetTimeSpanInput Clone() {
      return new ResetTimeSpanInput(this);
    }

    /// <summary>Field number for the "max_timespan" field.</summary>
    public const int MaxTimespanFieldNumber = 1;
    private long maxTimespan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxTimespan {
      get { return maxTimespan_; }
      set {
        maxTimespan_ = value;
      }
    }

    /// <summary>Field number for the "min_timespan" field.</summary>
    public const int MinTimespanFieldNumber = 2;
    private long minTimespan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MinTimespan {
      get { return minTimespan_; }
      set {
        minTimespan_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResetTimeSpanInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResetTimeSpanInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxTimespan != other.MaxTimespan) return false;
      if (MinTimespan != other.MinTimespan) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxTimespan != 0L) hash ^= MaxTimespan.GetHashCode();
      if (MinTimespan != 0L) hash ^= MinTimespan.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxTimespan != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MaxTimespan);
      }
      if (MinTimespan != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(MinTimespan);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxTimespan != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxTimespan);
      }
      if (MinTimespan != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinTimespan);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResetTimeSpanInput other) {
      if (other == null) {
        return;
      }
      if (other.MaxTimespan != 0L) {
        MaxTimespan = other.MaxTimespan;
      }
      if (other.MinTimespan != 0L) {
        MinTimespan = other.MinTimespan;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MaxTimespan = input.ReadInt64();
            break;
          }
          case 16: {
            MinTimespan = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResetTimeSpanOutput : pb::IMessage<ResetTimeSpanOutput> {
    private static readonly pb::MessageParser<ResetTimeSpanOutput> _parser = new pb::MessageParser<ResetTimeSpanOutput>(() => new ResetTimeSpanOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResetTimeSpanOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.IdoContract.IdoContractReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetTimeSpanOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetTimeSpanOutput(ResetTimeSpanOutput other) : this() {
      maxTimespan_ = other.maxTimespan_;
      minTimespan_ = other.minTimespan_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetTimeSpanOutput Clone() {
      return new ResetTimeSpanOutput(this);
    }

    /// <summary>Field number for the "max_timespan" field.</summary>
    public const int MaxTimespanFieldNumber = 1;
    private long maxTimespan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxTimespan {
      get { return maxTimespan_; }
      set {
        maxTimespan_ = value;
      }
    }

    /// <summary>Field number for the "min_timespan" field.</summary>
    public const int MinTimespanFieldNumber = 2;
    private long minTimespan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MinTimespan {
      get { return minTimespan_; }
      set {
        minTimespan_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResetTimeSpanOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResetTimeSpanOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxTimespan != other.MaxTimespan) return false;
      if (MinTimespan != other.MinTimespan) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxTimespan != 0L) hash ^= MaxTimespan.GetHashCode();
      if (MinTimespan != 0L) hash ^= MinTimespan.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxTimespan != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MaxTimespan);
      }
      if (MinTimespan != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(MinTimespan);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxTimespan != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxTimespan);
      }
      if (MinTimespan != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinTimespan);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResetTimeSpanOutput other) {
      if (other == null) {
        return;
      }
      if (other.MaxTimespan != 0L) {
        MaxTimespan = other.MaxTimespan;
      }
      if (other.MinTimespan != 0L) {
        MinTimespan = other.MinTimespan;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MaxTimespan = input.ReadInt64();
            break;
          }
          case 16: {
            MinTimespan = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PublicOfferingOutput : pb::IMessage<PublicOfferingOutput> {
    private static readonly pb::MessageParser<PublicOfferingOutput> _parser = new pb::MessageParser<PublicOfferingOutput>(() => new PublicOfferingOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PublicOfferingOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.IdoContract.IdoContractReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublicOfferingOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublicOfferingOutput(PublicOfferingOutput other) : this() {
      offeringTokenSymbol_ = other.offeringTokenSymbol_;
      offeringTokenAmount_ = other.offeringTokenAmount_ != null ? other.offeringTokenAmount_.Clone() : null;
      wantTokenSymbol_ = other.wantTokenSymbol_;
      wantTokenAmount_ = other.wantTokenAmount_ != null ? other.wantTokenAmount_.Clone() : null;
      startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
      endTime_ = other.endTime_ != null ? other.endTime_.Clone() : null;
      publicId_ = other.publicId_;
      publisher_ = other.publisher_ != null ? other.publisher_.Clone() : null;
      claimed_ = other.claimed_;
      wantTokenBalance_ = other.wantTokenBalance_ != null ? other.wantTokenBalance_.Clone() : null;
      subscribedOfferingAmount_ = other.subscribedOfferingAmount_ != null ? other.subscribedOfferingAmount_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublicOfferingOutput Clone() {
      return new PublicOfferingOutput(this);
    }

    /// <summary>Field number for the "offering_token_symbol" field.</summary>
    public const int OfferingTokenSymbolFieldNumber = 1;
    private string offeringTokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OfferingTokenSymbol {
      get { return offeringTokenSymbol_; }
      set {
        offeringTokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "offering_token_amount" field.</summary>
    public const int OfferingTokenAmountFieldNumber = 2;
    private global::AElf.Types.BigIntValue offeringTokenAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue OfferingTokenAmount {
      get { return offeringTokenAmount_; }
      set {
        offeringTokenAmount_ = value;
      }
    }

    /// <summary>Field number for the "want_token_symbol" field.</summary>
    public const int WantTokenSymbolFieldNumber = 3;
    private string wantTokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WantTokenSymbol {
      get { return wantTokenSymbol_; }
      set {
        wantTokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "want_token_amount" field.</summary>
    public const int WantTokenAmountFieldNumber = 4;
    private global::AElf.Types.BigIntValue wantTokenAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue WantTokenAmount {
      get { return wantTokenAmount_; }
      set {
        wantTokenAmount_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "public_id" field.</summary>
    public const int PublicIdFieldNumber = 7;
    private long publicId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PublicId {
      get { return publicId_; }
      set {
        publicId_ = value;
      }
    }

    /// <summary>Field number for the "publisher" field.</summary>
    public const int PublisherFieldNumber = 8;
    private global::AElf.Types.Address publisher_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Publisher {
      get { return publisher_; }
      set {
        publisher_ = value;
      }
    }

    /// <summary>Field number for the "claimed" field.</summary>
    public const int ClaimedFieldNumber = 9;
    private bool claimed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Claimed {
      get { return claimed_; }
      set {
        claimed_ = value;
      }
    }

    /// <summary>Field number for the "Want_Token_Balance" field.</summary>
    public const int WantTokenBalanceFieldNumber = 10;
    private global::AElf.Types.BigIntValue wantTokenBalance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue WantTokenBalance {
      get { return wantTokenBalance_; }
      set {
        wantTokenBalance_ = value;
      }
    }

    /// <summary>Field number for the "Subscribed_Offering_Amount" field.</summary>
    public const int SubscribedOfferingAmountFieldNumber = 11;
    private global::AElf.Types.BigIntValue subscribedOfferingAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue SubscribedOfferingAmount {
      get { return subscribedOfferingAmount_; }
      set {
        subscribedOfferingAmount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PublicOfferingOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PublicOfferingOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OfferingTokenSymbol != other.OfferingTokenSymbol) return false;
      if (!object.Equals(OfferingTokenAmount, other.OfferingTokenAmount)) return false;
      if (WantTokenSymbol != other.WantTokenSymbol) return false;
      if (!object.Equals(WantTokenAmount, other.WantTokenAmount)) return false;
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(EndTime, other.EndTime)) return false;
      if (PublicId != other.PublicId) return false;
      if (!object.Equals(Publisher, other.Publisher)) return false;
      if (Claimed != other.Claimed) return false;
      if (!object.Equals(WantTokenBalance, other.WantTokenBalance)) return false;
      if (!object.Equals(SubscribedOfferingAmount, other.SubscribedOfferingAmount)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OfferingTokenSymbol.Length != 0) hash ^= OfferingTokenSymbol.GetHashCode();
      if (offeringTokenAmount_ != null) hash ^= OfferingTokenAmount.GetHashCode();
      if (WantTokenSymbol.Length != 0) hash ^= WantTokenSymbol.GetHashCode();
      if (wantTokenAmount_ != null) hash ^= WantTokenAmount.GetHashCode();
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (endTime_ != null) hash ^= EndTime.GetHashCode();
      if (PublicId != 0L) hash ^= PublicId.GetHashCode();
      if (publisher_ != null) hash ^= Publisher.GetHashCode();
      if (Claimed != false) hash ^= Claimed.GetHashCode();
      if (wantTokenBalance_ != null) hash ^= WantTokenBalance.GetHashCode();
      if (subscribedOfferingAmount_ != null) hash ^= SubscribedOfferingAmount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OfferingTokenSymbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(OfferingTokenSymbol);
      }
      if (offeringTokenAmount_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OfferingTokenAmount);
      }
      if (WantTokenSymbol.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(WantTokenSymbol);
      }
      if (wantTokenAmount_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(WantTokenAmount);
      }
      if (startTime_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(EndTime);
      }
      if (PublicId != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(PublicId);
      }
      if (publisher_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Publisher);
      }
      if (Claimed != false) {
        output.WriteRawTag(72);
        output.WriteBool(Claimed);
      }
      if (wantTokenBalance_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(WantTokenBalance);
      }
      if (subscribedOfferingAmount_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(SubscribedOfferingAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OfferingTokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OfferingTokenSymbol);
      }
      if (offeringTokenAmount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OfferingTokenAmount);
      }
      if (WantTokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WantTokenSymbol);
      }
      if (wantTokenAmount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WantTokenAmount);
      }
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (endTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTime);
      }
      if (PublicId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PublicId);
      }
      if (publisher_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Publisher);
      }
      if (Claimed != false) {
        size += 1 + 1;
      }
      if (wantTokenBalance_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WantTokenBalance);
      }
      if (subscribedOfferingAmount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SubscribedOfferingAmount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PublicOfferingOutput other) {
      if (other == null) {
        return;
      }
      if (other.OfferingTokenSymbol.Length != 0) {
        OfferingTokenSymbol = other.OfferingTokenSymbol;
      }
      if (other.offeringTokenAmount_ != null) {
        if (offeringTokenAmount_ == null) {
          OfferingTokenAmount = new global::AElf.Types.BigIntValue();
        }
        OfferingTokenAmount.MergeFrom(other.OfferingTokenAmount);
      }
      if (other.WantTokenSymbol.Length != 0) {
        WantTokenSymbol = other.WantTokenSymbol;
      }
      if (other.wantTokenAmount_ != null) {
        if (wantTokenAmount_ == null) {
          WantTokenAmount = new global::AElf.Types.BigIntValue();
        }
        WantTokenAmount.MergeFrom(other.WantTokenAmount);
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.endTime_ != null) {
        if (endTime_ == null) {
          EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EndTime.MergeFrom(other.EndTime);
      }
      if (other.PublicId != 0L) {
        PublicId = other.PublicId;
      }
      if (other.publisher_ != null) {
        if (publisher_ == null) {
          Publisher = new global::AElf.Types.Address();
        }
        Publisher.MergeFrom(other.Publisher);
      }
      if (other.Claimed != false) {
        Claimed = other.Claimed;
      }
      if (other.wantTokenBalance_ != null) {
        if (wantTokenBalance_ == null) {
          WantTokenBalance = new global::AElf.Types.BigIntValue();
        }
        WantTokenBalance.MergeFrom(other.WantTokenBalance);
      }
      if (other.subscribedOfferingAmount_ != null) {
        if (subscribedOfferingAmount_ == null) {
          SubscribedOfferingAmount = new global::AElf.Types.BigIntValue();
        }
        SubscribedOfferingAmount.MergeFrom(other.SubscribedOfferingAmount);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            OfferingTokenSymbol = input.ReadString();
            break;
          }
          case 18: {
            if (offeringTokenAmount_ == null) {
              OfferingTokenAmount = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(OfferingTokenAmount);
            break;
          }
          case 26: {
            WantTokenSymbol = input.ReadString();
            break;
          }
          case 34: {
            if (wantTokenAmount_ == null) {
              WantTokenAmount = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(WantTokenAmount);
            break;
          }
          case 42: {
            if (startTime_ == null) {
              StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 50: {
            if (endTime_ == null) {
              EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EndTime);
            break;
          }
          case 56: {
            PublicId = input.ReadInt64();
            break;
          }
          case 66: {
            if (publisher_ == null) {
              Publisher = new global::AElf.Types.Address();
            }
            input.ReadMessage(Publisher);
            break;
          }
          case 72: {
            Claimed = input.ReadBool();
            break;
          }
          case 82: {
            if (wantTokenBalance_ == null) {
              WantTokenBalance = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(WantTokenBalance);
            break;
          }
          case 90: {
            if (subscribedOfferingAmount_ == null) {
              SubscribedOfferingAmount = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(SubscribedOfferingAmount);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Events
  /// </summary>
  public sealed partial class AddPublicOffering : pb::IMessage<AddPublicOffering> {
    private static readonly pb::MessageParser<AddPublicOffering> _parser = new pb::MessageParser<AddPublicOffering>(() => new AddPublicOffering());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddPublicOffering> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.IdoContract.IdoContractReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddPublicOffering() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddPublicOffering(AddPublicOffering other) : this() {
      offeringTokenSymbol_ = other.offeringTokenSymbol_;
      offeringTokenAmount_ = other.offeringTokenAmount_ != null ? other.offeringTokenAmount_.Clone() : null;
      wantTokenSymbol_ = other.wantTokenSymbol_;
      wantTokenAmount_ = other.wantTokenAmount_ != null ? other.wantTokenAmount_.Clone() : null;
      publisher_ = other.publisher_ != null ? other.publisher_.Clone() : null;
      startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
      endTime_ = other.endTime_ != null ? other.endTime_.Clone() : null;
      publicId_ = other.publicId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddPublicOffering Clone() {
      return new AddPublicOffering(this);
    }

    /// <summary>Field number for the "offering_token_symbol" field.</summary>
    public const int OfferingTokenSymbolFieldNumber = 1;
    private string offeringTokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OfferingTokenSymbol {
      get { return offeringTokenSymbol_; }
      set {
        offeringTokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "offering_token_amount" field.</summary>
    public const int OfferingTokenAmountFieldNumber = 2;
    private global::AElf.Types.BigIntValue offeringTokenAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue OfferingTokenAmount {
      get { return offeringTokenAmount_; }
      set {
        offeringTokenAmount_ = value;
      }
    }

    /// <summary>Field number for the "want_token_symbol" field.</summary>
    public const int WantTokenSymbolFieldNumber = 3;
    private string wantTokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WantTokenSymbol {
      get { return wantTokenSymbol_; }
      set {
        wantTokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "want_token_amount" field.</summary>
    public const int WantTokenAmountFieldNumber = 4;
    private global::AElf.Types.BigIntValue wantTokenAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue WantTokenAmount {
      get { return wantTokenAmount_; }
      set {
        wantTokenAmount_ = value;
      }
    }

    /// <summary>Field number for the "publisher" field.</summary>
    public const int PublisherFieldNumber = 5;
    private global::AElf.Types.Address publisher_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Publisher {
      get { return publisher_; }
      set {
        publisher_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Timestamp endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "public_id" field.</summary>
    public const int PublicIdFieldNumber = 8;
    private long publicId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PublicId {
      get { return publicId_; }
      set {
        publicId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddPublicOffering);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddPublicOffering other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OfferingTokenSymbol != other.OfferingTokenSymbol) return false;
      if (!object.Equals(OfferingTokenAmount, other.OfferingTokenAmount)) return false;
      if (WantTokenSymbol != other.WantTokenSymbol) return false;
      if (!object.Equals(WantTokenAmount, other.WantTokenAmount)) return false;
      if (!object.Equals(Publisher, other.Publisher)) return false;
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(EndTime, other.EndTime)) return false;
      if (PublicId != other.PublicId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OfferingTokenSymbol.Length != 0) hash ^= OfferingTokenSymbol.GetHashCode();
      if (offeringTokenAmount_ != null) hash ^= OfferingTokenAmount.GetHashCode();
      if (WantTokenSymbol.Length != 0) hash ^= WantTokenSymbol.GetHashCode();
      if (wantTokenAmount_ != null) hash ^= WantTokenAmount.GetHashCode();
      if (publisher_ != null) hash ^= Publisher.GetHashCode();
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (endTime_ != null) hash ^= EndTime.GetHashCode();
      if (PublicId != 0L) hash ^= PublicId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OfferingTokenSymbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(OfferingTokenSymbol);
      }
      if (offeringTokenAmount_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OfferingTokenAmount);
      }
      if (WantTokenSymbol.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(WantTokenSymbol);
      }
      if (wantTokenAmount_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(WantTokenAmount);
      }
      if (publisher_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Publisher);
      }
      if (startTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(EndTime);
      }
      if (PublicId != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(PublicId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OfferingTokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OfferingTokenSymbol);
      }
      if (offeringTokenAmount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OfferingTokenAmount);
      }
      if (WantTokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WantTokenSymbol);
      }
      if (wantTokenAmount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WantTokenAmount);
      }
      if (publisher_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Publisher);
      }
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (endTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTime);
      }
      if (PublicId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PublicId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddPublicOffering other) {
      if (other == null) {
        return;
      }
      if (other.OfferingTokenSymbol.Length != 0) {
        OfferingTokenSymbol = other.OfferingTokenSymbol;
      }
      if (other.offeringTokenAmount_ != null) {
        if (offeringTokenAmount_ == null) {
          OfferingTokenAmount = new global::AElf.Types.BigIntValue();
        }
        OfferingTokenAmount.MergeFrom(other.OfferingTokenAmount);
      }
      if (other.WantTokenSymbol.Length != 0) {
        WantTokenSymbol = other.WantTokenSymbol;
      }
      if (other.wantTokenAmount_ != null) {
        if (wantTokenAmount_ == null) {
          WantTokenAmount = new global::AElf.Types.BigIntValue();
        }
        WantTokenAmount.MergeFrom(other.WantTokenAmount);
      }
      if (other.publisher_ != null) {
        if (publisher_ == null) {
          Publisher = new global::AElf.Types.Address();
        }
        Publisher.MergeFrom(other.Publisher);
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.endTime_ != null) {
        if (endTime_ == null) {
          EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EndTime.MergeFrom(other.EndTime);
      }
      if (other.PublicId != 0L) {
        PublicId = other.PublicId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            OfferingTokenSymbol = input.ReadString();
            break;
          }
          case 18: {
            if (offeringTokenAmount_ == null) {
              OfferingTokenAmount = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(OfferingTokenAmount);
            break;
          }
          case 26: {
            WantTokenSymbol = input.ReadString();
            break;
          }
          case 34: {
            if (wantTokenAmount_ == null) {
              WantTokenAmount = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(WantTokenAmount);
            break;
          }
          case 42: {
            if (publisher_ == null) {
              Publisher = new global::AElf.Types.Address();
            }
            input.ReadMessage(Publisher);
            break;
          }
          case 50: {
            if (startTime_ == null) {
              StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 58: {
            if (endTime_ == null) {
              EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EndTime);
            break;
          }
          case 64: {
            PublicId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChangeAscription : pb::IMessage<ChangeAscription> {
    private static readonly pb::MessageParser<ChangeAscription> _parser = new pb::MessageParser<ChangeAscription>(() => new ChangeAscription());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeAscription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.IdoContract.IdoContractReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeAscription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeAscription(ChangeAscription other) : this() {
      tokenSymbol_ = other.tokenSymbol_;
      oldPublisher_ = other.oldPublisher_ != null ? other.oldPublisher_.Clone() : null;
      newPublisher_ = other.newPublisher_ != null ? other.newPublisher_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeAscription Clone() {
      return new ChangeAscription(this);
    }

    /// <summary>Field number for the "token_symbol" field.</summary>
    public const int TokenSymbolFieldNumber = 1;
    private string tokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenSymbol {
      get { return tokenSymbol_; }
      set {
        tokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "old_publisher" field.</summary>
    public const int OldPublisherFieldNumber = 2;
    private global::AElf.Types.Address oldPublisher_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address OldPublisher {
      get { return oldPublisher_; }
      set {
        oldPublisher_ = value;
      }
    }

    /// <summary>Field number for the "new_publisher" field.</summary>
    public const int NewPublisherFieldNumber = 3;
    private global::AElf.Types.Address newPublisher_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address NewPublisher {
      get { return newPublisher_; }
      set {
        newPublisher_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeAscription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeAscription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TokenSymbol != other.TokenSymbol) return false;
      if (!object.Equals(OldPublisher, other.OldPublisher)) return false;
      if (!object.Equals(NewPublisher, other.NewPublisher)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TokenSymbol.Length != 0) hash ^= TokenSymbol.GetHashCode();
      if (oldPublisher_ != null) hash ^= OldPublisher.GetHashCode();
      if (newPublisher_ != null) hash ^= NewPublisher.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TokenSymbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TokenSymbol);
      }
      if (oldPublisher_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OldPublisher);
      }
      if (newPublisher_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(NewPublisher);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenSymbol);
      }
      if (oldPublisher_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OldPublisher);
      }
      if (newPublisher_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewPublisher);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeAscription other) {
      if (other == null) {
        return;
      }
      if (other.TokenSymbol.Length != 0) {
        TokenSymbol = other.TokenSymbol;
      }
      if (other.oldPublisher_ != null) {
        if (oldPublisher_ == null) {
          OldPublisher = new global::AElf.Types.Address();
        }
        OldPublisher.MergeFrom(other.OldPublisher);
      }
      if (other.newPublisher_ != null) {
        if (newPublisher_ == null) {
          NewPublisher = new global::AElf.Types.Address();
        }
        NewPublisher.MergeFrom(other.NewPublisher);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TokenSymbol = input.ReadString();
            break;
          }
          case 18: {
            if (oldPublisher_ == null) {
              OldPublisher = new global::AElf.Types.Address();
            }
            input.ReadMessage(OldPublisher);
            break;
          }
          case 26: {
            if (newPublisher_ == null) {
              NewPublisher = new global::AElf.Types.Address();
            }
            input.ReadMessage(NewPublisher);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Withdraw : pb::IMessage<Withdraw> {
    private static readonly pb::MessageParser<Withdraw> _parser = new pb::MessageParser<Withdraw>(() => new Withdraw());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Withdraw> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.IdoContract.IdoContractReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Withdraw() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Withdraw(Withdraw other) : this() {
      pubilicId_ = other.pubilicId_;
      to_ = other.to_ != null ? other.to_.Clone() : null;
      wantToken_ = other.wantToken_;
      offeringToken_ = other.offeringToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Withdraw Clone() {
      return new Withdraw(this);
    }

    /// <summary>Field number for the "pubilic_id" field.</summary>
    public const int PubilicIdFieldNumber = 1;
    private long pubilicId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PubilicId {
      get { return pubilicId_; }
      set {
        pubilicId_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 2;
    private global::AElf.Types.Address to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    /// <summary>Field number for the "want_token" field.</summary>
    public const int WantTokenFieldNumber = 3;
    private long wantToken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WantToken {
      get { return wantToken_; }
      set {
        wantToken_ = value;
      }
    }

    /// <summary>Field number for the "offering_token" field.</summary>
    public const int OfferingTokenFieldNumber = 4;
    private long offeringToken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OfferingToken {
      get { return offeringToken_; }
      set {
        offeringToken_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Withdraw);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Withdraw other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PubilicId != other.PubilicId) return false;
      if (!object.Equals(To, other.To)) return false;
      if (WantToken != other.WantToken) return false;
      if (OfferingToken != other.OfferingToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PubilicId != 0L) hash ^= PubilicId.GetHashCode();
      if (to_ != null) hash ^= To.GetHashCode();
      if (WantToken != 0L) hash ^= WantToken.GetHashCode();
      if (OfferingToken != 0L) hash ^= OfferingToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PubilicId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PubilicId);
      }
      if (to_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(To);
      }
      if (WantToken != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(WantToken);
      }
      if (OfferingToken != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(OfferingToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PubilicId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PubilicId);
      }
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (WantToken != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WantToken);
      }
      if (OfferingToken != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OfferingToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Withdraw other) {
      if (other == null) {
        return;
      }
      if (other.PubilicId != 0L) {
        PubilicId = other.PubilicId;
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::AElf.Types.Address();
        }
        To.MergeFrom(other.To);
      }
      if (other.WantToken != 0L) {
        WantToken = other.WantToken;
      }
      if (other.OfferingToken != 0L) {
        OfferingToken = other.OfferingToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PubilicId = input.ReadInt64();
            break;
          }
          case 18: {
            if (to_ == null) {
              To = new global::AElf.Types.Address();
            }
            input.ReadMessage(To);
            break;
          }
          case 24: {
            WantToken = input.ReadInt64();
            break;
          }
          case 32: {
            OfferingToken = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Invest : pb::IMessage<Invest> {
    private static readonly pb::MessageParser<Invest> _parser = new pb::MessageParser<Invest>(() => new Invest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Invest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.IdoContract.IdoContractReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Invest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Invest(Invest other) : this() {
      publicId_ = other.publicId_;
      investor_ = other.investor_ != null ? other.investor_.Clone() : null;
      tokenSymbol_ = other.tokenSymbol_;
      income_ = other.income_ != null ? other.income_.Clone() : null;
      spend_ = other.spend_ != null ? other.spend_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Invest Clone() {
      return new Invest(this);
    }

    /// <summary>Field number for the "public_id" field.</summary>
    public const int PublicIdFieldNumber = 1;
    private long publicId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PublicId {
      get { return publicId_; }
      set {
        publicId_ = value;
      }
    }

    /// <summary>Field number for the "investor" field.</summary>
    public const int InvestorFieldNumber = 2;
    private global::AElf.Types.Address investor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Investor {
      get { return investor_; }
      set {
        investor_ = value;
      }
    }

    /// <summary>Field number for the "token_symbol" field.</summary>
    public const int TokenSymbolFieldNumber = 3;
    private string tokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenSymbol {
      get { return tokenSymbol_; }
      set {
        tokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "income" field.</summary>
    public const int IncomeFieldNumber = 4;
    private global::AElf.Types.BigIntValue income_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue Income {
      get { return income_; }
      set {
        income_ = value;
      }
    }

    /// <summary>Field number for the "spend" field.</summary>
    public const int SpendFieldNumber = 5;
    private global::AElf.Types.BigIntValue spend_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue Spend {
      get { return spend_; }
      set {
        spend_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Invest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Invest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PublicId != other.PublicId) return false;
      if (!object.Equals(Investor, other.Investor)) return false;
      if (TokenSymbol != other.TokenSymbol) return false;
      if (!object.Equals(Income, other.Income)) return false;
      if (!object.Equals(Spend, other.Spend)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PublicId != 0L) hash ^= PublicId.GetHashCode();
      if (investor_ != null) hash ^= Investor.GetHashCode();
      if (TokenSymbol.Length != 0) hash ^= TokenSymbol.GetHashCode();
      if (income_ != null) hash ^= Income.GetHashCode();
      if (spend_ != null) hash ^= Spend.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PublicId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PublicId);
      }
      if (investor_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Investor);
      }
      if (TokenSymbol.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TokenSymbol);
      }
      if (income_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Income);
      }
      if (spend_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Spend);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PublicId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PublicId);
      }
      if (investor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Investor);
      }
      if (TokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenSymbol);
      }
      if (income_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Income);
      }
      if (spend_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spend);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Invest other) {
      if (other == null) {
        return;
      }
      if (other.PublicId != 0L) {
        PublicId = other.PublicId;
      }
      if (other.investor_ != null) {
        if (investor_ == null) {
          Investor = new global::AElf.Types.Address();
        }
        Investor.MergeFrom(other.Investor);
      }
      if (other.TokenSymbol.Length != 0) {
        TokenSymbol = other.TokenSymbol;
      }
      if (other.income_ != null) {
        if (income_ == null) {
          Income = new global::AElf.Types.BigIntValue();
        }
        Income.MergeFrom(other.Income);
      }
      if (other.spend_ != null) {
        if (spend_ == null) {
          Spend = new global::AElf.Types.BigIntValue();
        }
        Spend.MergeFrom(other.Spend);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PublicId = input.ReadInt64();
            break;
          }
          case 18: {
            if (investor_ == null) {
              Investor = new global::AElf.Types.Address();
            }
            input.ReadMessage(Investor);
            break;
          }
          case 26: {
            TokenSymbol = input.ReadString();
            break;
          }
          case 34: {
            if (income_ == null) {
              Income = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(Income);
            break;
          }
          case 42: {
            if (spend_ == null) {
              Spend = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(Spend);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Harvest : pb::IMessage<Harvest> {
    private static readonly pb::MessageParser<Harvest> _parser = new pb::MessageParser<Harvest>(() => new Harvest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Harvest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.IdoContract.IdoContractReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Harvest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Harvest(Harvest other) : this() {
      publicId_ = other.publicId_;
      to_ = other.to_ != null ? other.to_.Clone() : null;
      amount_ = other.amount_ != null ? other.amount_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Harvest Clone() {
      return new Harvest(this);
    }

    /// <summary>Field number for the "public_id" field.</summary>
    public const int PublicIdFieldNumber = 1;
    private long publicId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PublicId {
      get { return publicId_; }
      set {
        publicId_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 2;
    private global::AElf.Types.Address to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private global::AElf.Types.BigIntValue amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Harvest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Harvest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PublicId != other.PublicId) return false;
      if (!object.Equals(To, other.To)) return false;
      if (!object.Equals(Amount, other.Amount)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PublicId != 0L) hash ^= PublicId.GetHashCode();
      if (to_ != null) hash ^= To.GetHashCode();
      if (amount_ != null) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PublicId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PublicId);
      }
      if (to_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(To);
      }
      if (amount_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PublicId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PublicId);
      }
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (amount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Harvest other) {
      if (other == null) {
        return;
      }
      if (other.PublicId != 0L) {
        PublicId = other.PublicId;
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::AElf.Types.Address();
        }
        To.MergeFrom(other.To);
      }
      if (other.amount_ != null) {
        if (amount_ == null) {
          Amount = new global::AElf.Types.BigIntValue();
        }
        Amount.MergeFrom(other.Amount);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PublicId = input.ReadInt64();
            break;
          }
          case 18: {
            if (to_ == null) {
              To = new global::AElf.Types.Address();
            }
            input.ReadMessage(To);
            break;
          }
          case 26: {
            if (amount_ == null) {
              Amount = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(Amount);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
