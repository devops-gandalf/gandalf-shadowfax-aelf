syntax = "proto3";

import "aelf/core.proto";
import "aelf/options.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";

option csharp_namespace = "Gandalf.Contracts.Shadowfax";

service ShadowfaxContract {
    option (aelf.csharp_state) = "Gandalf.Contracts.Shadowfax.ShadowfaxContractState";

    //  Action
    rpc Initialize (InitializeInput) returns (google.protobuf.Empty) {
    }
    rpc AddPublicOffering (AddPublicOfferingInput) returns (google.protobuf.Int64Value) {
    }
    rpc ChangeAscription (ChangeAscriptionInput) returns (google.protobuf.Empty) {
    }
    rpc Withdraw (google.protobuf.Int64Value) returns (google.protobuf.Empty) {
    }
    rpc Invest (InvestInput) returns (google.protobuf.Empty) {
    }
    rpc Harvest (google.protobuf.Int64Value) returns (google.protobuf.Empty) {
    }
    rpc ResetTimeSpan (ResetTimeSpanInput) returns (google.protobuf.Empty) {
    }

    //  View
    rpc GetOwner (google.protobuf.Empty) returns (aelf.Address) {
        option (aelf.is_view) = true;
    }
    rpc GetTimespan (google.protobuf.Empty) returns (ResetTimeSpanOutput) {
        option (aelf.is_view) = true;
    }
    rpc GetPublicOffering (google.protobuf.Int64Value) returns (PublicOfferingOutput){
        option (aelf.is_view) = true;
    }
    rpc GetUserInfo (UserInfoInput) returns (UserInfo){
        option (aelf.is_view) = true;
    }
    rpc GetPublicOfferingLength (google.protobuf.Empty) returns (google.protobuf.Int64Value){
        option (aelf.is_view) = true;
    }
    rpc GetTokenOwnership (google.protobuf.StringValue) returns (aelf.Address){
        option (aelf.is_view) = true;
    }
}

// Stucts
message PublicOffering {
    string offering_token_symbol = 1;
    int64 offering_token_amount = 2;
    string want_token_symbol = 3;
    int64 want_token_amount = 4;
    google.protobuf.Timestamp start_time = 5;
    google.protobuf.Timestamp end_time = 6;
    aelf.Address  publisher = 7;
    bool claimed = 8;
    int64 want_token_balance = 9;
    int64 subscribed_offering_amount = 10;
}

message UserInfo {
    bool claimed = 1;
    int64 obtain_amount = 2;
}

// Inputs
message InitializeInput {
    aelf.Address owner = 1;
}

message AddPublicOfferingInput {
    string offering_token_symbol = 1;
    int64 offering_token_amount = 2;
    string want_token_symbol = 3;
    int64 want_token_amount = 4;
    google.protobuf.Timestamp start_time = 5;
    google.protobuf.Timestamp end_time = 6;
}

message ChangeAscriptionInput {
    string token_symbol = 1;
    aelf.Address receiver = 2;
}

message InvestInput {
    int64 public_id = 1;
    int64 amount = 2;
    string channel = 3;
}

message UserInfoInput {
    int64 public_id = 1;
    aelf.Address user = 2;
}

// Seconds
message ResetTimeSpanInput {
    int64 max_timespan = 1;
    int64 min_timespan = 2;
}

// Outputs
message ResetTimeSpanOutput {
    int64 max_timespan = 1;
    int64 min_timespan = 2;
}

message PublicOfferingOutput{
    string offering_token_symbol = 1;
    int64 offering_token_amount = 2;
    string want_token_symbol = 3;
    int64 want_token_amount = 4;
    google.protobuf.Timestamp start_time = 5;
    google.protobuf.Timestamp end_time = 6;
    int64 public_id = 7;
    aelf.Address publisher = 8;
    bool claimed = 9;
    int64 Want_Token_Balance = 10;
    int64 Subscribed_Offering_Amount = 11;
}

// Events
message AddPublicOffering{
    option (aelf.is_event) = true;
    string offering_token_symbol = 1;
    int64 offering_token_amount = 2;
    string want_token_symbol = 3;
    int64 want_token_amount = 4;
    aelf.Address publisher = 5;
    google.protobuf.Timestamp start_time = 6;
    google.protobuf.Timestamp end_time = 7;
    int64 public_id = 8;
}

message ChangeAscription{
    option (aelf.is_event) = true;
    string token_symbol = 1;
    aelf.Address old_publisher = 2;
    aelf.Address new_publisher = 3;
}

message Withdraw {
    option (aelf.is_event) = true;
    int64 pubilic_id = 1;
    aelf.Address to = 2;
    int64 want_token = 3;
    int64 offering_token = 4;
}

message Invest {
    option (aelf.is_event) = true;
    int64 public_id = 1;
    aelf.Address investor = 2;
    string token_symbol = 3;
    int64 income = 4;
    int64 spend = 5;
    string channel = 6;
}

message Harvest {
    option (aelf.is_event) = true;
    int64 public_id = 1;
    aelf.Address to = 2;
    int64 amount = 3;
}