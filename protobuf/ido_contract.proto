/* This files is part of the Hello World smart contract example that is included in Boilerplate.
 * It is only the definition of the contract, implementation is located in the "contract" folder
 * and tests are located in the "test" folder.
 *
 * You can use this as a basic template for new contracts.
 * 
 * When building Boilerplate or the contract project located in the "../contract/AElf.Contracts.IdoContract/" 
 * protoc (the protobuf compiler) will be invoked and this file will produce a .c.cs file and .g.cs file, in the 
 * "../contract/AElf.Contracts.IdoContract/Protobuf/Generated/" folder. 
 */

// the version of the language, use proto3 for contracts
syntax = "proto3";

// some core imports for aelf chain types
import "aelf/core.proto";
import "aelf/options.proto";

// import for using the google.protobuf.Empty type.
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";

// the name of the C# namespace in which the contract code will be,
// generated code will also be in this namespace.
option csharp_namespace = "Gandalf.Contracts.IdoContract";

// the contract definition: a gRPC service definition.
service IdoContract {

  // the full name of the C# class that will contain the state (here <namespace>.<state-class-name> format).
  option (aelf.csharp_state) = "Gandalf.Contracts.IdoContract.IdoContractState";

  // an action defined as a gRPC service method.
  // this action take a google.protobuf.Empty (placeholder for void) as input
  // and returns a custom defined type: HelloReturn.
  //  Action
  rpc Initialize(aelf.Address) returns(google.protobuf.Empty){
  }

  rpc AddPublicOffering(AddPublicOfferingInput) returns (google.protobuf.Int64Value){
  }

  rpc ChangeAscription(ChangeAscriptionInput) returns(google.protobuf.Empty){
  }

  rpc Withdraw(google.protobuf.Int32Value) returns(google.protobuf.Empty){
  }

  rpc Invest(InvestInput) returns(google.protobuf.Empty){
  }

  rpc Harvest(google.protobuf.Int32Value) returns (google.protobuf.Empty){
  }

  rpc ResetTimeSpan(ResetTimeSpanInput) returns (google.protobuf.Empty){
  }

  //  View
  rpc GetOwner(google.protobuf.Empty) returns (aelf.Address){
    option (aelf.is_view) = true;
  }

  rpc GetTimespan(google.protobuf.Empty) returns (ResetTimeSpanOutput){
    option (aelf.is_view) = true;
  }

  rpc GetPublicOffering(google.protobuf.Int32Value) returns (PublicOfferingOutput){
    option (aelf.is_view) = true;
  }

  rpc GetUserInfo(UserInfoInput) returns (UserInfo){
    option (aelf.is_view) = true;
  }
}

// stuct
message PublicOffering {
  string offering_token_symbol = 1;
  aelf.BigIntValue offering_token_amount = 2;
  string want_token_symbol = 3;
  aelf.BigIntValue want_token_amount = 4;
  google.protobuf.Timestamp start_time = 5;
  google.protobuf.Timestamp end_time = 6;
  aelf.Address  publisher = 7;
  bool claimed = 8;
  aelf.BigIntValue want_token_balance = 9;
  aelf.BigIntValue subscribed_offering_amount = 10;
}

message UserInfo{
  bool claimed = 1;
  aelf.BigIntValue obtain_amount = 2;
}

message PublicOfferList{
  repeated PublicOffering value = 1;
}

//input

message AddPublicOfferingInput{
  string offering_token_symbol = 1;
  aelf.BigIntValue offering_token_amount = 2;
  string want_token_symbol = 3;
  aelf.BigIntValue want_token_amount = 4;
  google.protobuf.Timestamp start_time = 5;
  google.protobuf.Timestamp end_time = 6;
}

message ChangeAscriptionInput{
  string token_symbol = 1;
  aelf.Address receiver = 2;
}

message InvestInput{
  int32 public_id = 1;
  aelf.BigIntValue amount = 2;
}

message UserInfoInput{
  int32 public_id = 1;
  aelf.Address user = 2;
}

//seconds
message ResetTimeSpanInput{
  int64 max_timespan = 1;
  int64 min_timespan = 2;
}

//out put

message ResetTimeSpanOutput{
  int64 max_timespan = 1;
  int64 min_timespan = 2;
}

message PublicOfferingOutput{
  string offering_token_symbol = 1;
  aelf.BigIntValue offering_token_amount = 2;
  string want_token_symbol = 3;
  aelf.BigIntValue want_token_amount = 4;
  google.protobuf.Timestamp start_time = 5;
  google.protobuf.Timestamp end_time = 6;
  int64 public_id = 7;
  aelf.Address publisher = 8;
  bool claimed = 9;
  aelf.BigIntValue Want_Token_Balance = 10;
  aelf.BigIntValue Subscribed_Offering_Amount = 11;
}


//Events
message AddPublicOffering{
  option (aelf.is_event) = true;
  string offering_token_symbol = 1;
  aelf.BigIntValue offering_token_amount = 2;
  string want_token_symbol = 3;
  aelf.BigIntValue want_token_amount = 4;
  aelf.Address publisher = 5;
  google.protobuf.Timestamp start_time = 6;
  google.protobuf.Timestamp end_time = 7;
  int64 public_id = 8;
}


message ChangeAscription{
  option (aelf.is_event) = true;
  string token_symbol = 1;
  aelf.Address old_publisher = 2;
  aelf.Address new_publisher = 3;
}

message Withdraw{
  option (aelf.is_event) = true;
  int64 pubilic_id = 1;
  aelf.Address to = 2;
  int64 want_token = 3;
  int64 offering_token = 4;
}

message Invest{
  option (aelf.is_event) = true;
  int64 public_id = 1;
  aelf.Address investor = 2;
  string token_symbol = 3;
  aelf.BigIntValue income = 4;
  aelf.BigIntValue spend = 5;
}

message Harvest{
  option (aelf.is_event) = true;
  int64 public_id = 1;
  aelf.Address to = 2;
  aelf.BigIntValue amount = 3;
}